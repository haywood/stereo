{"version":3,"sources":["webpack:///./src/web/renderer/index.ts"],"names":["renderer","constructor","width","window","innerWidth","height","innerHeight","aspect","this","setSize","camera","PerspectiveCamera","position","z","render","scene","d","color","points","geometry","assert","equal","length","setAttribute","BufferAttribute","computeBoundingSphere","s","boundingSphere","Math","min","center","radius","requestAnimationFrame","WebGLRenderer","onresize","Points","BufferGeometry","PointsMaterial","vertexColors","VertexColors","size","Scene","add","domElement"],"mappings":"yRAoFO,IAAMA,EAAW,IArExB,MAOEC,cAAc,4GAFF,GAEE,iBAoBI,KAChB,IAEMC,EAAQC,OAAOC,WACfC,EAASF,OAAOG,YAChBC,EAASL,EAAQG,EAGvBG,KAAKR,SAASS,QAAQP,EAAOG,GAC7BG,KAAKE,OAAS,IAAIC,IAHN,IAG6BJ,EAR5B,IACL,KAQRC,KAAKE,OAAOE,SAASC,EAAIL,KAAKK,IA9BlB,gBAqCL,KACPL,KAAKR,SAASc,OAAON,KAAKO,MAAOP,KAAKE,UAtC1B,gBAyCJ,IAAiC,IAAjC,EAAEM,EAAF,SAAKJ,EAAL,MAAeK,GAAkB,GACnC,OAAEC,GAAWV,KACbW,EAAWD,EAAOC,SACxBC,IAAOC,MAAMT,EAASU,OAASN,EAAG,GAClCI,IAAOC,MAAMJ,EAAMK,OAAS,EAAG,GAE/BH,EAASI,aAAa,WAAY,IAAIC,IAAgBZ,EAAUI,IAChEG,EAASI,aAAa,QAAS,IAAIC,IAAgBP,EAAO,IAE1D,IAAIJ,EAAI,EACR,GAAIG,EAAI,EAAG,CACTG,EAASM,wBACT,IAAMC,EAAIP,EAASQ,eACnBd,EAAIe,KAAKC,IAAI,EAAGH,EAAEI,OAAOjB,EAAIa,EAAEK,OAAS,GAE1CvB,KAAKE,OAAOE,SAASC,EAAIL,KAAKK,EAAIA,EAElCmB,sBAAsBxB,KAAKM,UAzD3BN,KAAKR,SAAW,IAAIiC,IACpBzB,KAAKC,UACLN,OAAO+B,SAAW,KAChB1B,KAAKC,UACLuB,sBAAsBxB,KAAKM,SAG7BN,KAAKU,OAAS,IAAIiB,IAChB,IAAIC,IACJ,IAAIC,IAAe,CACjBC,aAAcC,IACdC,KAAM,QAIVhC,KAAKO,MAAQ,IAAI0B,IACjBjC,KAAKO,MAAM2B,IAAIlC,KAAKU,QAgBtB,iBACE,OAAOV,KAAKR,SAAS2C","file":"6.e924335ecb0b848834c9.js","sourcesContent":["import assert from 'assert';\n\nimport {\n  BufferAttribute,\n  BufferGeometry,\n  PerspectiveCamera,\n  Points,\n  PointsMaterial,\n  Scene,\n  VertexColors,\n  WebGLRenderer\n} from 'three';\n\nimport { Data } from '../../data';\n\nclass Renderer {\n  private renderer: WebGLRenderer;\n  private scene: Scene;\n  private camera: PerspectiveCamera;\n  private points: Points;\n  private z = 5;\n\n  constructor() {\n    this.renderer = new WebGLRenderer();\n    this.setSize();\n    window.onresize = () => {\n      this.setSize();\n      requestAnimationFrame(this.render);\n    };\n\n    this.points = new Points(\n      new BufferGeometry(),\n      new PointsMaterial({\n        vertexColors: VertexColors,\n        size: 0.001\n      })\n    );\n\n    this.scene = new Scene();\n    this.scene.add(this.points);\n  }\n\n  private setSize = () => {\n    const near = 0.01,\n      far = 1000;\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    const aspect = width / height;\n    const fov = 100;\n\n    this.renderer.setSize(width, height);\n    this.camera = new PerspectiveCamera(fov, aspect, near, far);\n    this.camera.position.z = this.z;\n  };\n\n  get domElement() {\n    return this.renderer.domElement;\n  }\n\n  render = () => {\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  update = ({ d, position, color }: Data) => {\n    const { points } = this;\n    const geometry = points.geometry as BufferGeometry;\n    assert.equal(position.length % d, 0);\n    assert.equal(color.length % 3, 0);\n\n    geometry.setAttribute('position', new BufferAttribute(position, d));\n    geometry.setAttribute('color', new BufferAttribute(color, 3));\n\n    let z = 5;\n    if (d > 2) {\n      geometry.computeBoundingSphere();\n      const s = geometry.boundingSphere;\n      z = Math.min(5, s.center.z + s.radius + 1);\n    }\n    this.camera.position.z = this.z = z;\n\n    requestAnimationFrame(this.render);\n  };\n}\n\nexport const renderer = new Renderer();\n"],"sourceRoot":""}