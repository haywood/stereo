{"version":3,"sources":["webpack:///./src/client/inputs.ts","webpack:///./src/client/controls.ts"],"names":["f0s","f1s","rotations","initialValues","pipe","limit","ps","i","j","length","push","planes","map","plane","key","JSON","stringify","f0","f1","join","theta","h","l","animate","sound","subjects","streams","persistence","query","URLSearchParams","window","location","search","get","saved","Object","entries","value","localStorage","getItem","restore","Subject","asObservable","values","Proxy","set","target","property","oldValue","success","Reflect","setItem","toString","persist","next","newValue","event","Controls","constructor","name","document","createElement","this","domElement","style","position","bottom","right","padding","color","display","flexDirection","alignItems","displayNames","type","input","Control","appendChild","append","children","forEach","c","checked","size","onchange","label","innerText","paddingRight","cursor","subscribe"],"mappings":"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","file":"5.a722c0b6c4437ff627d0.js","sourcesContent":["import { Observable, Subject } from 'rxjs';\n\nconst initialValues = {\n    pipe: defaultPipe(),\n    theta: 'pi * t * daudio / 20',\n    h: 'abs(sin(theta)) * i / n',\n    l: 'eaudio',\n    animate: true,\n    sound: false,\n};\nexport type Inputs = typeof initialValues;\n\ntype Change<T> = {\n    newValue: T;\n    oldValue?: T;\n    event?: Event;\n};\nconst subjects: { [P in keyof Inputs]?: Subject<Change<Inputs[P]>> } = {};\n\nexport const streams: { [P in keyof Inputs]?: Observable<Change<Inputs[P]>> } = {};\n\nconst persistence: { [P in keyof Inputs]: boolean } = {\n    pipe: true,\n    theta: true,\n    h: true,\n    l: true,\n    animate: false,\n    sound: false,\n};\n\nconst persist = () => {\n    for (const [key, value] of Object.entries(values)) {\n        if (persistence[key]) {\n            localStorage.setItem(`inputs.${key}`, value.toString());\n        };\n    }\n};\n\nconst restore = () => {\n    // TODO (maybe): also support override from window.location.hash\n    for (const [key, saved] of Object.entries(persistence)) {\n        if (saved) {\n            const value = localStorage.getItem(`inputs.${key}`);\n            if (value) initialValues[key] = value;\n        };\n    }\n};\n\nconst query = new URLSearchParams(window.location.search);\nif (query.get('restore') !== '0') {\n    restore();\n}\n\nfor (const key in initialValues) {\n    subjects[key] = new Subject();\n    streams[key] = subjects[key].asObservable();\n}\n\nexport const values = new Proxy(initialValues, {\n    set(target, property, value) {\n        const oldValue = target[property];\n        const success = Reflect.set(target, property, value);\n        if (query.get('persist') !== '0') persist();\n        subjects[property].next({ newValue: value, event: window.event, oldValue });\n        return success;\n    }\n});\n\n// Genereates 10,000 points on a 4-d spiral and oscillates them\n// in the first 3 of the 6 planes of R^4. Use of tanh instead of sin in\n// the xy-plane causes the system to expand and contract at intervals.\nfunction defaultPipe() {\n    const d = 4;\n    const planes = (limit: number): [number, number][] => {\n        let ps = [];\n        for (let i = 0; i < d; i++) {\n            for (let j = i + 1; j < d; j++) {\n                if (ps.length < limit) {\n                    ps.push([i, j]);\n                } else {\n                    return ps;\n                }\n            }\n        }\n        return ps;\n    };\n\n    const f0s = {\n    };\n\n    const f1s = {\n        '[0,2]': 'sin',\n    };\n\n    const rotations = planes(3).map(plane => {\n        const key = JSON.stringify(plane);\n        const f0 = f0s[key] || 'cos';\n        const f1 = f1s[key] || 'tan';\n        return `R(theta, ${plane[0]}, ${plane[1]}, ${f0}, ${f1})`;\n    }).join('->');\n\n    return `10000->sphere(${d}, 1)->${rotations}->stereo(3)`;\n}\n","import { values, streams, Inputs } from './inputs';\n\nexport class Controls {\n    readonly domElement = document.createElement('form');\n\n    constructor() {\n        this.domElement.style.position = 'absolute';\n        this.domElement.style.bottom = '0';\n        this.domElement.style.right = '0';\n        this.domElement.style.padding = '8px';\n        this.domElement.style.color = 'white';\n        this.domElement.style.display = 'flex';\n        this.domElement.style.flexDirection = 'column';\n        this.domElement.style.alignItems = 'flex-end';\n\n        for (const name in values) {\n            if (!(name in displayNames)) continue;\n\n            const type = typeof values[name] === 'boolean' ? 'checkbox' : 'text';\n            const input = new Control(name, type);\n            this.domElement.appendChild(input.domElement);\n        }\n    }\n\n    append(...children: { domElement: Element; }[]) {\n        children.forEach(c => this.domElement.appendChild(c.domElement));\n    }\n}\n\ntype DisplayNames = {\n    [P in keyof Inputs]?: string;\n};\nconst displayNames: DisplayNames = {\n    pipe: 'Pipe Spec',\n    theta: 'Theta',\n    h: 'Hue',\n    l: 'Lightness',\n    animate: 'Animate',\n    sound: '🎙️',\n};\n\nclass Control {\n    readonly domElement = document.createElement('span');\n\n    constructor(readonly name: string, readonly type: 'text' | 'checkbox') {\n        const input: HTMLInputElement = document.createElement('input');\n        const value = values[name];\n\n        input.name = name;\n        input.type = type;\n        if (type === 'checkbox') {\n            input.checked = value;\n        } else {\n            input.value = value;\n        }\n        input.size = 50;\n        input.onchange = () => {\n            if (type === 'checkbox') {\n                values[name] = input.checked;\n            } else {\n                values[name] = input.value;\n            }\n        };\n\n        const label = document.createElement('label');\n        label.innerText = displayNames[name];\n        label.style.paddingRight = '8px';\n        if (type === 'checkbox') label.style.cursor = 'pointer';\n        this.domElement.appendChild(label).appendChild(input);\n\n        streams[name].subscribe(({ event, newValue }) => {\n            if (event) return;\n            if (type === 'checkbox') {\n                input.checked = newValue;\n            } else {\n                input.value = newValue.toString();\n            }\n        });\n    }\n}\n"],"sourceRoot":""}