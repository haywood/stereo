{"version":3,"sources":["webpack:///./src/web/inputs/index.ts","webpack:///./src/core/pp.ts","webpack:///./src/core/data.ts","webpack:///./src/core/pipe/pool.ts","webpack:///./src/core/fn/interval.ts","webpack:///./src/core/constants.ts","webpack:///./src/core/pipe/pipe.worker.ts","webpack:///./src/core/fn/cube.ts","webpack:///./src/core/fn/fn.ts","webpack:///./src/core/fn/rotator.ts","webpack:///./src/core/fn/sphere.ts","webpack:///./src/core/fn/fucked_up_torus.ts","webpack:///./src/core/fn/identity.ts","webpack:///./src/core/fn/spiral.ts","webpack:///./src/core/fn/stereo.ts","webpack:///./src/core/fn/torus.ts","webpack:///./src/core/pipe/resolver.ts","webpack:///./src/web/renderer.ts"],"names":["temp","persistenceEnabled","URLSearchParams","window","location","search","get","hash","substr","atob","AbstractInput","constructor","id","_value","persistent","disabled","stringify","Error","this","has","parse","updateHash","BehaviorSubject","newValue","el","classList","add","_setup","str","value","set","document","btoa","toString","initFromOrWriteToHash","subject","newSubject","asObservable","oldValue","next","event","TextInput","s","super","onchange","oninput","setSize","stream","subscribe","HTMLInputElement","size","length","lines","split","rows","Math","min","cols","reduce","max","line","ToggleInput","bool","on","querySelector","onclick","off","style","display","test","n","poolSize","inputs","pipe","trim","text","replace","theta","h","v","animate","mic","AudioContext","audioWorklet","fullscreen","fullscreenEnabled","allowedDbs","input","multirange","minEl","maxEl","valueLow","valueHigh","innerText","parseInt","save","action","ev","canvas","renderer","domElement","render","blob","Promise","resolve","toBlob","url","URL","createObjectURL","a","createElement","download","href","click","revokeObjectURL","debug","pp","p","JSON","Data","d","position","color","buffer","data","Float32Array","nOffset","positionOffset","d0","SharedArrayBuffer","inputOffset","arr","offset","subarray","inputLength","positionLength","colorOffset","i","stride","assert","pool","logger","getLogger","setLevel","navigator","hardwareConcurrency","startPool","info","Pool","spawn","Worker","name","Map","promises","push","queue","all","initialize","params","timing","forkJoin","chunk","w","iterate","getOrInitialize","key","hv","getKey","resolver","Resolver","scope","staticFn","dynamicFn","bufferFor","op","round","label","start","Date","now","t","elapsed","runPipeline","slice","Interval","b","x","y","equal","limit","fn","nPerLevel","points","pop","successors","domain","pow","inf","module","exports","Cube","l","interval","sample","Array","fill","cos","sin","exp","tan","tanh","components","from","keys","CompositeFn","fns","first","rest","apply","domainMax","dMax","last","f","isFinite","sign","Rotator","d1","f0","f1","cube","r0","r1","Sphere","r","PI","phi","root","map","FuckedUpTorus","sphere","circle","q","Identity","Spiral","k","Stereo","to","fromTemp","toTemp","up","down","n2","norm2","divisor","result","Torus","cross","rotator","head","tail","steps","links","link","resolveStep","buildComposites","builder","Builder","isDynamic","shift","init","build","type","args","ranges","funs","some","isNodeDynamic","index","target","idu","toUpperCase","fail","operands","ops","node","kind","hint","resolvePipe","resolveFn","resolveAccess","resolveId","resolveArith","actual","isNaN","spiral","torus","fucked_up_torus","rotate","stereo","width","innerWidth","height","innerHeight","aspect","camera","PerspectiveCamera","z","scene","geometry","setAttribute","BufferAttribute","computeBoundingSphere","boundingSphere","center","radius","requestAnimationFrame","WebGLRenderer","onresize","Points","BufferGeometry","PointsMaterial","vertexColors","VertexColors","Scene"],"mappings":"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","file":"2.dbdb0b90c13517ff2c92.js","sourcesContent":["import multirange from 'multirange';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\nimport { poolSize } from '../../core/pipe/pool';\nimport debug from '../debug';\nimport { renderer } from '../renderer';\n\ntype Change<T> = {\n  newValue: T;\n  oldValue?: T;\n  event?: Event;\n};\n\nconst query = new URLSearchParams(window.location.search);\nconst persistenceEnabled = query.get('p') != '0';\nconst hash = (() => {\n  const temp = window.location.hash.substr(1);\n  return new URLSearchParams(temp ? atob(temp) : '');\n})();\n\ntype Options<T> = {\n  persistent?: boolean;\n  disabled?: boolean;\n  stringify?: (t: T) => string;\n};\nexport abstract class AbstractInput<T, E extends HTMLElement = HTMLElement> {\n  readonly disabled: boolean;\n\n  protected readonly stringify: (t: T) => string;\n  protected el?: E;\n\n  private readonly subject: Subject<Change<T>>;\n  private readonly persistent: boolean;\n\n  constructor(\n    readonly id: string,\n    private _value: T,\n    {\n      persistent = false,\n      disabled = false,\n      stringify = () => {\n        throw new Error('stringify unsupported');\n      },\n    }: Options<T> = {},\n  ) {\n    this.persistent = persistent;\n    this.disabled = disabled;\n    this.stringify = stringify;\n\n    if (persistenceEnabled) {\n      this.initFromOrWriteToHash();\n    } else {\n      this.persistent = false;\n    }\n\n    this.subject = this.newSubject();\n  }\n\n  initFromOrWriteToHash = () => {\n    if (this.persistent && hash.has(this.id)) {\n      this._value = this.parse(hash.get(this.id));\n    } else if (this.persistent) {\n      this.updateHash();\n    }\n  };\n\n  newSubject = () => new BehaviorSubject({ newValue: this._value });\n\n  setup = (el: E) => {\n    this.el = el;\n    if (this.disabled) this.el.classList.add('disabled');\n    this._setup();\n  };\n\n  protected abstract _setup(): void;\n\n  protected parse(str: string): T {\n    throw new Error('parse unsupported');\n  }\n\n  get stream() {\n    return this.subject.asObservable();\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(newValue: T) {\n    const oldValue = this.value;\n    this._value = newValue;\n    this.subject.next({ newValue, oldValue, event: window.event });\n    if (this.persistent) this.updateHash();\n  }\n\n  private updateHash = () => {\n    const str = this.stringify(this.value);\n    hash.set(this.id, str);\n    document.location.hash = btoa(hash.toString());\n  };\n}\n\ntype TextInputId = 'pipe' | 'theta' | 'h' | 'v';\n\nexport class TextInput extends AbstractInput<\n  string,\n  HTMLInputElement | HTMLTextAreaElement\n> {\n  constructor(\n    readonly id: TextInputId,\n    _value: string,\n    { persistent = true, disabled = false, stringify = (s: string) => s } = {},\n  ) {\n    super(id, _value, { persistent, disabled, stringify });\n  }\n\n  protected _setup = () => {\n    this.el.disabled = this.disabled;\n\n    this.el.onchange = () => {\n      this.el.value = this.stringify(this.el.value);\n      this.value = this.el.value;\n    };\n\n    this.el.oninput = () => this.setSize();\n\n    this.stream.subscribe(({ newValue }) => {\n      this.el.value = this.stringify(newValue);\n      this.setSize();\n    });\n  };\n\n  private setSize() {\n    if (this.el instanceof HTMLInputElement)\n      this.el.size = this.el.value.length;\n    else {\n      const lines = this.el.value.split('\\n');\n      this.el.rows = Math.min(10, lines.length);\n      this.el.cols = Math.min(\n        50,\n        lines.reduce((max, line) => Math.max(max, line.length), 0),\n      );\n    }\n  }\n\n  protected parse(str: string) {\n    return str;\n  }\n}\n\ntype ToggleInputId = 'animate' | 'mic' | 'fullscreen';\n\nexport class ToggleInput extends AbstractInput<boolean> {\n  constructor(\n    readonly id: ToggleInputId,\n    _value: boolean,\n    { disabled = false, persistent = false } = {},\n  ) {\n    super(id, _value, {\n      persistent,\n      disabled,\n      stringify: (bool: boolean) => {\n        return bool ? '1' : '0';\n      },\n    });\n  }\n\n  protected _setup = () => {\n    const on = this.el.querySelector<HTMLInputElement>('.on');\n    if (!this.disabled) on.onclick = () => (this.value = true);\n\n    const off = this.el.querySelector<HTMLInputElement>('.off');\n    if (!this.disabled) off.onclick = () => (this.value = false);\n\n    this.stream.subscribe(({ newValue }) => {\n      if (newValue) {\n        on.style.display = 'none';\n        off.style.display = 'inline';\n      } else {\n        on.style.display = 'inline';\n        off.style.display = 'none';\n      }\n    });\n  };\n\n  protected parse(str: string) {\n    if (/1|true/i.test(str)) return true;\n    else if (/0|false/i.test(str)) return false;\n    else throw new Error(`invalid boolean value for input ${this.id}: ${str}`);\n  }\n}\n\ntype RangeInputId = 'allowed_db_range';\n\nexport class RangeInput extends AbstractInput<[number, number]> {\n  constructor(\n    readonly id: RangeInputId,\n    _value: [number, number],\n    { disabled = false, persistent = true } = {},\n  ) {\n    super(id, _value, {\n      disabled,\n      persistent,\n      stringify: ([min, max]) => {\n        return `${min},${max}`;\n      },\n    });\n  }\n\n  protected _setup = () => {\n    const input = this.el.querySelector<MultirangeHTMLInputElement>('input');\n    input.disabled = this.disabled;\n    multirange(input);\n    const minEl = this.el.querySelector<HTMLElement>('.min');\n    const maxEl = this.el.querySelector<HTMLElement>('.max');\n\n    input.onchange = () => {\n      this.value = [+input.valueLow, +input.valueHigh];\n    };\n\n    this.el.querySelector<HTMLInputElement>(\n      'input.ghost',\n    ).oninput = input.oninput = () => {\n      minEl.innerText = input.valueLow.toString();\n      maxEl.innerText = input.valueHigh.toString();\n    };\n\n    this.stream.subscribe(({ newValue }) => {\n      input.value = this.stringify(newValue);\n      minEl.innerText = input.valueLow.toString();\n      maxEl.innerText = input.valueHigh.toString();\n    });\n  };\n\n  protected parse(str: string): [number, number] {\n    const [min, max] = str.split(/,/);\n    return [parseInt(min), parseInt(max)];\n  }\n}\n\nexport class ActionInput extends AbstractInput<void> {\n  constructor(id: string, private readonly action: (ev: MouseEvent) => void) {\n    super(id, null);\n  }\n\n  protected _setup = () => {\n    if (!this.disabled) this.el.onclick = ev => this.action(ev);\n  };\n}\n\n// Points generation is done in parallel, so pick n such\n// that each chunk is size 2000\nconst n = 2000 * poolSize;\n\nexport const inputs = {\n  pipe: new TextInput(\n    'pipe',\n    `\n    ${n}\n      ->3\n      ->torus(1, 1)\n      ->R(theta, 0, 1, cos, tan)\n      ->R(theta, 0, 2)\n      ->R(theta, 0, 3)\n      ->stereo(3)`.trim(),\n    {\n      persistent: true,\n      stringify: text => text.replace(/\\s*(->|=>)\\s*/g, '\\n  ->').trim(),\n    },\n  ),\n  theta: new TextInput('theta', 'pi * power + pi * t / 20'),\n  h: new TextInput('h', 'chroma * abs(p[0])'),\n  v: new TextInput('v', '(power + onset) / 2'),\n  animate: new ToggleInput('animate', true),\n  mic: new ToggleInput('mic', false, {\n    disabled: !new AudioContext().audioWorklet,\n  }),\n  fullscreen: new ToggleInput('fullscreen', false, {\n    disabled: !document.fullscreenEnabled,\n  }),\n  allowedDbs: new RangeInput('allowed_db_range', [-130, -30], {\n    disabled: !new AudioContext().audioWorklet,\n  }),\n  save: new ActionInput('save', async () => {\n    const canvas = renderer.domElement;\n    renderer.render();\n    const blob = await new Promise(resolve => canvas.toBlob(resolve));\n    const url = URL.createObjectURL(blob);\n    try {\n      const a = document.createElement('a');\n      a.download = `stereo${document.location.hash}`;\n      a.href = url;\n      a.click();\n    } finally {\n      URL.revokeObjectURL(url);\n    }\n  }),\n};\nexport type Inputs = typeof inputs;\n\ndebug('inputs', inputs);\n","export const pp = (a: any, p = 2) => JSON.stringify(a, null, p);\n","import assert from 'assert';\n\nexport type Vector = Float32Array;\n\nexport class Data {\n  constructor(\n    readonly n: number,\n    readonly d: number,\n    readonly position: Float32Array,\n    readonly color: Float32Array,\n  ) {}\n\n  static fromBuffer = (buffer: ArrayBuffer) => {\n    const data = new Float32Array(buffer);\n    const n = data[Data.nOffset];\n    const d = data[Data.positionOffset(data)];\n    const position = Data.position(data);\n    const color = Data.color(data);\n    return new Data(n, d, position, color);\n  };\n\n  static bufferFor = (n: number, d0: number, d: number): SharedArrayBuffer => {\n    const bytesPerNum = 4;\n    const count = 3 + n * (d0 + d + 3);\n    const byteLength = bytesPerNum * count;\n    const buffer = new SharedArrayBuffer(byteLength);\n    const data = new Float32Array(buffer);\n    data[Data.nOffset] = n;\n    data[Data.inputOffset] = d0;\n    data[Data.positionOffset(data)] = d;\n    return buffer;\n  };\n\n  static input = (arr: Float32Array) => {\n    const offset = Data.inputOffset + 1;\n    return arr.subarray(offset, offset + Data.inputLength(arr));\n  };\n\n  static position = (arr: Float32Array) => {\n    const offset = Data.positionOffset(arr) + 1;\n    return arr.subarray(offset, offset + Data.positionLength(arr));\n  };\n\n  static color = (arr: Float32Array) => {\n    const offset = Data.colorOffset(arr);\n    return arr.subarray(offset);\n  };\n\n  static nOffset = 0;\n\n  static inputOffset = Data.nOffset + 1;\n  private static inputLength = (arr: Float32Array) => {\n    const n = arr[Data.nOffset];\n    const d0 = arr[Data.inputOffset];\n    return n * d0;\n  };\n\n  static positionOffset = (arr: Float32Array) =>\n    Data.inputOffset + Data.inputLength(arr) + 1;\n  private static positionLength = (arr: Float32Array) => {\n    const n = arr[Data.nOffset];\n    const d = arr[Data.positionOffset(arr)];\n    return n * d;\n  };\n\n  static colorOffset = (arr: Float32Array) =>\n    Data.positionOffset(arr) + Data.positionLength(arr) + 1;\n\n  static get = (arr: Vector, i: number, stride: number) => {\n    const offset = i * stride;\n    return arr.subarray(offset, offset + stride);\n  };\n\n  static set = (\n    arr: Vector,\n    value: ArrayLike<number>,\n    i: number,\n    stride: number,\n  ) => {\n    assert(value.length <= stride);\n    const offset = i * stride;\n    return arr.set(value, offset);\n  };\n}\n","import { spawn, Worker, Pool, ModuleThread } from 'threads';\nimport { getLogger } from 'loglevel';\nimport { Params, PipelineWorker, Chunk } from './types';\nimport { Data } from '../data';\nimport { Resolver, Resolution } from './resolver';\n\nconst logger = getLogger('PipelinePool');\nlet pool: Pool<ModuleThread<PipelineWorker>>;\nlet data: Map<string, SharedArrayBuffer>;\nlogger.setLevel('info');\n\nexport const poolSize = 2 * navigator.hardwareConcurrency;\n\nexport const startPool = async () => {\n  logger.info('starting worker pool');\n  let i = 0;\n  pool = Pool(\n    () => spawn(new Worker('./pipe.worker', { name: `pipe${i++}` })),\n    poolSize,\n  );\n  data = new Map();\n  let promises = [];\n  for (let i = 0; i < poolSize; i++) {\n    // pre-load scripts so the first task doesn't take forever\n    promises.push(pool.queue(async () => {}));\n  }\n  await Promise.all(promises);\n};\n\nexport const stopPool = async (): Promise<void> => {\n  logger.info('waiting for pending tasks to complete before terminating pool');\n  try {\n    await pool.terminate(true);\n  } catch (err) {\n    logger.error(err);\n  } finally {\n    pool = null;\n  }\n};\n\nconst initialize = (\n  params: Params,\n  n: number,\n  buffer: SharedArrayBuffer,\n): Promise<void> => {\n  return timing('initialization')(async () => {\n    return forkJoin(n, async chunk => {\n      return pool.queue(w => w.initialize(params, chunk, buffer));\n    });\n  });\n};\n\nconst iterate = (params: Params, buffer: SharedArrayBuffer) => {\n  return timing('iteration')(async () => {\n    return forkJoin(params.pipe.n, async chunk => {\n      return pool.queue(w => w.iterate(params, chunk, buffer));\n    });\n  });\n};\n\nconst getKey = (params: Params) =>\n  JSON.stringify({\n    pipe: params.pipe,\n    hv: params.hv,\n  });\n\nconst getOrInitialize = async (params: Params): Promise<SharedArrayBuffer> => {\n  const key = getKey(params);\n  if (!data.has(key)) {\n    const resolver = new Resolver(params.scope);\n    const { n, staticFn, dynamicFn } = resolver.resolve(params.pipe);\n    const buffer = Data.bufferFor(n, staticFn.d, dynamicFn.d);\n    await initialize(params, n, buffer);\n    data.set(key, buffer);\n  }\n  return data.get(key);\n};\n\nconst forkJoin = async (n: number, op: (chunk: Chunk) => Promise<void>) => {\n  const size = Math.round(n / poolSize);\n  let promises = [];\n  for (let offset = 0; offset < n; offset += size) {\n    const chunk = { offset, size: Math.min(n - offset, size) };\n    promises.push(op(chunk));\n  }\n  await Promise.all(promises);\n};\n\nconst timing = (label: string) => async <T>(op: () => Promise<T>) => {\n  const start = Date.now();\n  const t = await op();\n  const elapsed = Date.now() - start;\n  logger.debug(`${label} took ${elapsed}ms`);\n  return t;\n};\n\nexport const runPipeline = async (\n  params: Params,\n): Promise<SharedArrayBuffer> => {\n  const buffer = await getOrInitialize(params);\n  await iterate(params, buffer);\n\n  return buffer.slice(0);\n};\n","import { Fn } from './fn';\nimport assert from 'assert';\nimport { Vector } from '../data';\n\nexport default class Interval implements Fn {\n  readonly domain: number;\n\n  constructor(readonly d: number, readonly a: number[], readonly b: number[]) {\n    assert.equal(a.length, d);\n    assert.equal(b.length, d);\n    this.domain = d;\n  }\n\n  static nPerLevel = (d: number, n: number) => {\n    return Math.round(Math.pow(n, 1 / d));\n  };\n\n  /**\n   * @param x A vector of length this.domain contained in the interval [0, 1].\n   * @returns A mapping of the vector into this interval.\n   */\n  fn = (x: Float32Array, y: Vector = new Float32Array(this.d)) => {\n    const { a, b, d } = this;\n    assert.equal(x.length, d);\n    assert.equal(y.length, d);\n    for (let i = 0; i < d; i++) {\n      y[i] = a[i] + x[i] * (b[i] - a[i]);\n    }\n    return y;\n  };\n\n  sample = function*(n: number, offset: number, limit: number) {\n    const { d, fn } = this;\n    n = Interval.nPerLevel(d, n);\n    const points: number[][] = [[]];\n    let i = 0;\n\n    while (points.length && i < limit) {\n      const p = points.pop()!;\n      if (p.length < d) {\n        points.push(...successors(p));\n      } else if (i++ >= offset) {\n        yield fn(p);\n      }\n    }\n\n    function* successors(p: number[]): Generator<number[]> {\n      for (let i = 0; i < n; i++) {\n        yield [...p, i / n];\n      }\n    }\n  };\n}\n","export const inf = 2 ** 32 - 1;\n","module.exports = __webpack_public_path__ + \"0.e3dbce7d94c9af3f5c5a.worker.js\"","import Interval from './interval';\nimport { Fn } from './fn';\nimport { Vector } from '../data';\n\nexport default class Cube implements Fn {\n  private readonly interval: Interval;\n\n  constructor(readonly d: number, readonly l: number) {\n    this.interval = new Interval(\n      d,\n      new Array(d).fill(-l / 2),\n      new Array(d).fill(l / 2),\n    );\n  }\n\n  get domain() {\n    return this.d;\n  }\n\n  fn = (x: Vector, y?: Vector) => this.interval.fn(x, y);\n\n  sample = (n: number, offset: number, limit: number) =>\n    this.interval.sample(n, offset, limit);\n}\n","import { Vector } from '../data';\nimport assert from 'assert';\nimport { inf } from '../constants';\n\nexport const cos = Math.cos;\nexport const sin = Math.sin;\nexport const tan = Math.tan;\nexport const tanh = Math.tanh;\nexport const exp = Math.exp;\n\nexport const components = d => Array.from(new Array(d).keys());\n\nexport interface Fn {\n  readonly d: number;\n  readonly domain: number;\n  fn(x: Vector, y?: Vector): Vector;\n  sample(n: number, offset: number, limit: number): Generator<Vector>;\n}\n\nexport class CompositeFn implements Fn {\n  private readonly x: Vector;\n  private readonly y: Vector;\n  constructor(readonly fns: Fn[]) {\n    assert(fns.length, 'fns cannot be empty');\n\n    const length = Math.max(this.domainMax, this.dMax);\n    this.x = new Float32Array(length);\n    this.y = new Float32Array(length);\n  }\n\n  get first() {\n    return this.fns[0];\n  }\n\n  get last() {\n    return this.fns[this.fns.length - 1];\n  }\n\n  get domain() {\n    return this.first.domain;\n  }\n\n  get d() {\n    return this.last.d;\n  }\n\n  get domainMax() {\n    return this.fns.reduce((max, f) => Math.max(f.domain, max), 0);\n  }\n\n  get dMax() {\n    return this.fns.reduce((max, f) => Math.max(f.d, max), 0);\n  }\n\n  sample = function*(n: number, offset: number, limit: number) {\n    const { fns, d } = this;\n    const [first, ...rest] = fns;\n    if (fns.length == 0) return [];\n\n    for (const x of first.sample(n, offset, limit)) {\n      this.x.set(x);\n      if (rest.length) {\n        CompositeFn.apply(rest, this.x, this.y);\n      } else {\n        this.y.set(x);\n      }\n      yield this.y.subarray(0, d);\n    }\n  };\n\n  fn = (x: Vector, y: Vector = new Float32Array(this.d)) => {\n    const { fns, domain, d } = this;\n    assert.equal(x.length, domain);\n    assert.equal(y.length, d);\n\n    this.x.set(x);\n    CompositeFn.apply(fns, this.x, this.y);\n    y.set(this.y.subarray(0, d));\n    return y;\n  };\n\n  private static apply = (fns: Fn[], x: Vector, y: Vector) => {\n    assert.equal(x.length, y.length);\n    for (const f of fns) {\n      f.fn(x.subarray(0, f.domain), y.subarray(0, f.d));\n      for (let i = 0; i < y.length; i++) {\n        if (!isFinite(y[i])) y[i] = Math.sign(y[i]) * inf;\n      }\n      x.set(y);\n    }\n  };\n\n  static Builder = class {\n    private readonly fns: Fn[] = [];\n\n    get d() {\n      return this.last.d;\n    }\n\n    get last() {\n      return this.fns[this.fns.length - 1];\n    }\n\n    add = (fn: Fn) => {\n      const { fns, last } = this;\n      if (last && fn.domain !== last.d) {\n        throw new Error(\n          `Cannot add ${fn} to composite, because its domain is not ${last.d}`,\n        );\n      }\n      fns.push(fn);\n      return this;\n    };\n\n    build = () => {\n      return new CompositeFn(this.fns);\n    };\n  };\n}\n","import { Fn, cos, sin } from './fn';\nimport Cube from './cube';\nimport { Vector } from '../data';\nimport assert from 'assert';\n\nexport default class Rotator implements Fn {\n  readonly r0: number;\n  readonly r1: number;\n\n  constructor(\n    readonly d: number,\n    readonly theta: number,\n    readonly d0: number,\n    readonly d1: number,\n    readonly f0: (theta: number) => number = cos,\n    readonly f1: (theta: number) => number = sin,\n  ) {\n    this.r0 = f0(theta);\n    this.r1 = f1(theta);\n  }\n\n  get domain() {\n    return this.d;\n  }\n\n  sample = function*(n: number, offset: number, limit: number) {\n    const cube = new Cube(this.domain, 2);\n    for (const p of cube.sample(n, offset, limit)) {\n      yield this.fn(p);\n    }\n  };\n\n  fn = (x: Vector, y: Vector = new Float32Array(this.d)) => {\n    const { d, d0, d1, r0, r1 } = this;\n    assert.equal(x.length, d);\n    assert.equal(y.length, d);\n    y.set(x);\n\n    const a = x[d0],\n      b = x[d1];\n    y[d0] = a * r0 - b * r1;\n    y[d1] = a * r1 + b * r0;\n    return y;\n  };\n}\n","import Rotator from './rotator';\nimport Cube from './cube';\nimport { Fn, components, CompositeFn } from './fn';\nimport { TypedArray } from 'three';\nimport { Vector } from '../data';\nimport assert from 'assert';\n\nexport default class Sphere implements Fn {\n  private readonly root: Float32Array;\n\n  constructor(readonly d: number, r: number) {\n    this.root = new Float32Array(d);\n    this.root[0] = r;\n  }\n\n  get domain() {\n    return this.d - 1;\n  }\n\n  sample = function*(n: number, offset: number, limit: number) {\n    const cube = new Cube(this.domain, 2 * Math.PI);\n    for (const phi of cube.sample(n, offset, limit)) {\n      yield this.fn(phi);\n    }\n  };\n\n  fn = (phi: Vector, y: Vector = new Float32Array(this.d)) => {\n    const { d, root } = this;\n    assert.equal(phi.length, d - 1);\n    assert.equal(y.length, d);\n\n    const r = new CompositeFn(\n      components(d - 1).map(i => new Rotator(d, phi[i], 0, i + 1)),\n    );\n    r.fn(root, y);\n    return y;\n  };\n}\n","import Cube from './cube';\nimport Sphere from './sphere';\nimport { Fn } from './fn';\nimport { Vector } from '../data';\nimport assert from 'assert';\n\n// This shape does not implement a torus. It used to,\n// but then I changed the way Rotator works, which\n// changed the way that the points of the sphere are\n// distributed, making the translation step behave incorrectly\n// Still makes a cool shape though, so keeping it\nexport default class FuckedUpTorus implements Fn {\n  private readonly sphere: Sphere;\n  private readonly circle: Sphere;\n\n  constructor(readonly d: number, readonly r: number, readonly t: number) {\n    this.sphere = new Sphere(d, t);\n    this.circle = new Sphere(2, r);\n  }\n\n  get domain() {\n    return this.d - 1;\n  }\n\n  sample = function*(n: number, offset: number, limit: number) {\n    const cube = new Cube(this.domain, 2 * Math.PI);\n    for (const phi of cube.sample(n, offset, limit)) {\n      yield this.fn(phi);\n    }\n  };\n\n  fn = (phi: Vector, y: Vector = new Float32Array(this.d)) => {\n    const { domain, d, sphere, circle } = this;\n    assert.equal(phi.length, domain);\n    assert.equal(y.length, d);\n    sphere.fn(phi, y);\n    const q = circle.fn(phi.subarray(d - 2));\n    y[0] += q[0];\n    y[d - 1] += q[1];\n    return y;\n  };\n}\n","import { Fn } from './fn';\nimport Cube from './cube';\nimport { Vector } from '../data';\nimport assert from 'assert';\n\nexport class Identity implements Fn {\n  readonly domain: number;\n\n  constructor(readonly d: number) {\n    this.domain = d;\n  }\n\n  fn = (x: Vector, y: Vector = new Float32Array(this.d)) => {\n    const { d } = this;\n    assert.equal(x.length, d);\n    assert.equal(y.length, d);\n    y.set(x);\n    return y;\n  };\n\n  sample = function*(n: number, offset: number, limit: number) {\n    throw new Error('identity function does not support sampling');\n  };\n}\n","import { Fn, exp, components } from './fn';\nimport Cube from './cube';\nimport Sphere from './sphere';\nimport assert from 'assert';\nimport { Vector } from '../data';\n\nexport default class Spiral implements Fn {\n  private readonly sphere: Sphere;\n\n  constructor(readonly d: number, readonly a: number[], readonly k: number[]) {\n    this.sphere = new Sphere(d, 1);\n  }\n\n  get domain() {\n    return this.d - 1;\n  }\n\n  sample = function*(n: number, offset: number, limit: number) {\n    const cube = new Cube(this.domain, 4 * Math.PI);\n    for (const phi of cube.sample(n, offset, limit)) {\n      yield this.fn(phi);\n    }\n  };\n\n  fn = (phi: Float32Array, y: Vector = new Float32Array(this.d)) => {\n    const { a, k, domain, d } = this;\n    assert.equal(phi.length, d - 1);\n    assert.equal(y.length, d);\n\n    this.sphere.fn(phi, y);\n    let x = 0;\n    for (let i = 0; i < domain; i++) {\n      x += k[i] * phi[i];\n    }\n    const r = exp(x);\n    for (let i = 0; i < d; i++) {\n      y[i] = y[i] * a[i] * r;\n    }\n    return y;\n  };\n}\n","import { Fn } from './fn';\nimport Cube from './cube';\nimport { Vector } from '../data';\nimport assert from 'assert';\n\nexport default class Stereo implements Fn {\n  private readonly fromTemp: Vector;\n  private readonly toTemp: Vector;\n\n  constructor(private readonly from: number, private readonly to: number) {\n    this.fromTemp = new Float32Array(Math.max(from, to));\n    this.toTemp = new Float32Array(Math.max(from, to));\n  }\n\n  get domain() {\n    return this.from;\n  }\n\n  get d() {\n    return this.to;\n  }\n\n  sample = function*(n: number, offset: number, limit: number) {\n    const cube = new Cube(this.domain, 2);\n    for (const phi of cube.sample(n, offset, limit)) {\n      yield this.fn(phi);\n    }\n  };\n\n  fn = (x: Vector, y: Vector = new Float32Array(this.to)) => {\n    let { from, to, fromTemp, toTemp } = this;\n    assert.equal(x.length, from);\n    assert.equal(y.length, to);\n\n    if (from === to) {\n      y.set(x);\n      return y;\n    }\n\n    fromTemp.set(x);\n\n    while (from < to) {\n      Stereo.up(fromTemp.subarray(0, from), toTemp.subarray(0, ++from));\n      fromTemp.set(toTemp);\n    }\n\n    while (from > to) {\n      Stereo.down(fromTemp.subarray(0, from), toTemp.subarray(0, --from));\n      fromTemp.set(toTemp);\n    }\n\n    y.set(toTemp.subarray(0, to));\n    return y;\n  };\n\n  static up = (x: Vector, temp: Vector) => {\n    assert.equal(temp.length, x.length + 1);\n    const n2 = norm2(x);\n    const divisor = n2 + 1;\n    temp[0] = (n2 - 1) / divisor;\n    for (let i = 1; i <= x.length; i++) {\n      temp[i] = (2 * x[i - 1]) / divisor;\n    }\n  };\n\n  static down = (x: Vector, temp: Vector) => {\n    assert.equal(temp.length, x.length - 1);\n    for (let i = 0; i < temp.length; i++) {\n      temp[i] = x[i + 1] / (1 - x[0]);\n    }\n  };\n}\n\nconst norm2 = (x: Vector) => {\n  let result = 0;\n  for (let i = 0; i < x.length; i++) {\n    result += x[i] * x[i];\n  }\n  return result;\n};\n","import Cube from './cube';\nimport Sphere from './sphere';\nimport { Fn } from './fn';\nimport Rotator from './rotator';\nimport assert from 'assert';\nimport { Vector } from '../data';\n\nexport default class Torus implements Fn {\n  private readonly cross: Sphere;\n\n  constructor(readonly d: number, readonly r: number, readonly t: number) {\n    assert(d > 2, `torus is only defined for d > 2; got ${d}`);\n    this.cross = new Sphere(d - 1, t);\n  }\n\n  get domain() {\n    return this.d - 1;\n  }\n\n  sample = function*(n: number, offset: number, limit: number) {\n    const cube = new Cube(this.domain, 2 * Math.PI);\n    for (const phi of cube.sample(n, offset, limit)) {\n      yield this.fn(phi);\n    }\n  };\n\n  fn = (theta: Vector, y: Vector = new Float32Array(this.d)) => {\n    const { cross, d, r } = this;\n    assert.equal(\n      theta.length,\n      d - 1,\n      `torus expects an input of ${d - 1}; got ${theta.length}`,\n    );\n    const rotator = new Rotator(d, theta[d - 2], 0, d - 1);\n\n    cross.fn(theta.subarray(0, d - 2), y.subarray(0, d - 1));\n    y[0] += r;\n    rotator.fn(y, y);\n\n    return y;\n  };\n}\n","import assert from 'assert';\n\nimport Cube from '../fn/cube';\nimport { CompositeFn, Fn } from '../fn/fn';\nimport FuckedUpTorus from '../fn/fucked_up_torus';\nimport { Identity } from '../fn/identity';\nimport Rotator from '../fn/rotator';\nimport Sphere from '../fn/sphere';\nimport Spiral from '../fn/spiral';\nimport Stereo from '../fn/stereo';\nimport Torus from '../fn/torus';\nimport { pp } from '../pp';\n\nimport {\n  AccessNode,\n  ArithNode,\n  FnNode,\n  PipeNode,\n  Scalar,\n  StepNode,\n  Value,\n} from './ast';\nimport { Link, Scope, UnaryOperator } from './types';\n\nexport type Resolution = {\n  n: number;\n  staticFn: CompositeFn;\n  dynamicFn: CompositeFn;\n};\n\nexport class Resolver {\n  constructor(private readonly scope: Scope) {}\n\n  resolve(node: PipeNode): Resolution;\n  resolve(node: Scalar, hint: 'number'): number;\n  resolve(node: Scalar, hint: 'function'): Function;\n  resolve(node: Scalar): Value;\n  resolve(node: any, hint?: any): any {\n    let value;\n    switch (node.kind) {\n      case 'pipe':\n        value = this.resolvePipe(node);\n        break;\n      case 'number':\n        value = node.value;\n        break;\n      case 'fn':\n        value = this.resolveFn(node);\n        break;\n      case 'access':\n        value = this.resolveAccess(node);\n        break;\n      case 'id':\n        value = this.resolveId(node.id);\n        break;\n      case 'arith':\n        value = this.resolveArith(node);\n        break;\n    }\n\n    if (hint) {\n      const actual = typeof value;\n      assert.equal(\n        actual,\n        hint,\n        `Expected identifier ${node.id} to resolve to a ${hint}, but was ${actual} instead.`,\n      );\n\n      if (hint === 'number' && isNaN(value))\n        assert.fail(\n          `Expected node ${pp(\n            node,\n          )} to resolve to a valid value, but was NaN instead.`,\n        );\n    }\n\n    return value;\n  }\n\n  private resolvePipe = (pipe: PipeNode): Resolution => {\n    const [head, ...tail] = pipe.steps;\n    const links: Link[] = [];\n    const link = this.resolveStep(pipe.d0, head);\n\n    links.push(link);\n\n    for (let i = 0; i < tail.length; i++) {\n      links.push(this.resolveStep(links[i].fn.d, tail[i]));\n    }\n\n    const [staticFn, dynamicFn] = this.buildComposites(links);\n    return { n: pipe.n, staticFn, dynamicFn };\n  };\n\n  private buildComposites = (links: Link[]) => {\n    let builder = new CompositeFn.Builder();\n    while (links.length && !links[0].isDynamic) {\n      builder.add(links.shift().fn);\n    }\n\n    const init = builder.build();\n    builder = new CompositeFn.Builder().add(new Identity(init.d));\n\n    while (links.length) {\n      builder.add(links.shift().fn);\n    }\n\n    const iter = builder.build();\n    return [init, iter];\n  };\n\n  private resolveStep = (d0: number, { type, args }: StepNode): Link => {\n    const d = ranges[type](d0);\n    const fn = funs[type](d, ...args.map(a => this.resolve(a)));\n    const isDynamic = args.some(this.isNodeDynamic);\n\n    return { fn, isDynamic };\n  };\n\n  private resolveFn = ({ name, args }: FnNode): number => {\n    const fn = Math[name];\n    assert(\n      typeof fn === 'function',\n      `Expected ${name} to be a Math function in ${pp({ name, args })}`,\n    );\n    return fn(...args.map(a => this.resolve(a)));\n  };\n\n  private resolveAccess = ({ id, index }: AccessNode): number => {\n    const scope = this.scope;\n    const target = scope[id];\n    assert(target, `Unable to resolve ${id} in scope ${pp(scope, 2)}`);\n    return target[this.resolve(index, 'number')];\n  };\n\n  private resolveId = (id: string): Value => {\n    if (id in this.scope) {\n      return this.scope[id];\n    } else if (id in Math) {\n      return Math[id];\n    } else {\n      const idu = id.toUpperCase();\n      if (idu in Math) return Math[idu];\n    }\n\n    assert.fail(`unable to resolve id ${id} in scope ${pp(this.scope, 2)}`);\n  };\n\n  private resolveArith = ({ op, operands }: ArithNode) => {\n    const [a, b] = operands.map(a => this.resolve(a, 'number'));\n    return ops[op](a, b);\n  };\n\n  private isNodeDynamic = (node: Scalar): boolean => {\n    switch (node.kind) {\n      case 'fn':\n        return node.args.some(this.isNodeDynamic);\n      case 'id':\n        return typeof this.resolve(node) === 'number';\n      case 'arith':\n        return node.operands.some(this.isNodeDynamic);\n      default:\n        return false;\n    }\n  };\n}\n\nconst ops: { [op: string]: (a: number, b: number) => number } = {\n  '+': (a, b) => a + b,\n  '-': (a, b) => a - b,\n  '*': (a, b) => a * b,\n  '/': (a, b) => a / b,\n  '**': (a, b) => a ** b,\n  '^': (a, b) => a ** b,\n};\n\nconst funs: { [op: string]: (d: number, ...rest) => Fn } = {\n  cube: (d, l) => new Cube(d, l),\n  sphere: (d, r: number) => new Sphere(d, r),\n  spiral: (d, a: number, k: number) =>\n    new Spiral(d, new Array(d).fill(a), new Array(d - 1).fill(k)),\n  torus: (d, r: number, t: number) => new Torus(d, r, t),\n  fucked_up_torus: (d, r: number, t: number) => new FuckedUpTorus(d, r, t),\n  rotate: (\n    d: number,\n    theta: number,\n    d0: number,\n    d1: number,\n    f0: UnaryOperator = Math.cos,\n    f1: UnaryOperator = Math.sin,\n  ) => {\n    assert(0 <= d0 && d0 < d, `rotate: Expected 0 <= d0 = ${d0} < d = ${d}`);\n    assert(0 <= d1 && d1 < d, `rotate: Expected 0 <= d1 = ${d1} < d = ${d}`);\n    return new Rotator(d, theta, d0, d1, f0, f1);\n  },\n  stereo: (d, to) => new Stereo(d, to),\n};\n\ntype Funs = typeof funs;\n\ntype Ranges = {\n  [P in keyof Funs]: (domain: number) => number;\n};\n\nconst ranges: Ranges = {\n  cube: domain => domain,\n  sphere: domain => domain + 1,\n  spiral: domain => domain + 1,\n  torus: domain => domain + 1,\n  fucked_up_torus: domain => domain + 1,\n  rotate: domain => domain,\n  r: domain => domain,\n  stereo: domain => domain,\n};\n","import {\n  PerspectiveCamera,\n  BufferGeometry,\n  BufferAttribute,\n  Points,\n  PointsMaterial,\n  WebGLRenderer,\n  VertexColors,\n  Scene,\n} from 'three';\nimport { Data } from '../core/data';\nimport assert from 'assert';\n\nclass Renderer {\n  private renderer: WebGLRenderer;\n  private scene: Scene;\n  private camera: PerspectiveCamera;\n  private points: Points;\n  private z = 5;\n\n  constructor() {\n    this.renderer = new WebGLRenderer();\n    this.setSize();\n    window.onresize = () => {\n      this.setSize();\n      requestAnimationFrame(this.render);\n    };\n\n    this.points = new Points(\n      new BufferGeometry(),\n      new PointsMaterial({\n        vertexColors: VertexColors,\n        size: 0.001,\n      }),\n    );\n\n    this.scene = new Scene();\n    this.scene.add(this.points);\n  }\n\n  private setSize = () => {\n    const near = 0.01,\n      far = 1000;\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    const aspect = width / height;\n    const fov = 100;\n\n    this.renderer.setSize(width, height);\n    this.camera = new PerspectiveCamera(fov, aspect, near, far);\n    this.camera.position.z = this.z;\n  };\n\n  get domElement() {\n    return this.renderer.domElement;\n  }\n\n  render = () => {\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  update = ({ d, position, color }: Data) => {\n    const { points } = this;\n    const geometry = points.geometry as BufferGeometry;\n    assert.equal(position.length % d, 0);\n    assert.equal(color.length % 3, 0);\n\n    geometry.setAttribute('position', new BufferAttribute(position, d));\n    geometry.setAttribute('color', new BufferAttribute(color, 3));\n\n    let z = 5;\n    if (d > 2) {\n      geometry.computeBoundingSphere();\n      const s = geometry.boundingSphere;\n      z = Math.min(5, s.center.z + s.radius + 1);\n    }\n    this.camera.position.z = this.z = z;\n\n    requestAnimationFrame(this.render);\n  };\n}\n\nexport const renderer = new Renderer();\n"],"sourceRoot":""}