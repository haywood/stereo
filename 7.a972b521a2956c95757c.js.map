{"version":3,"sources":["webpack:///./src/web/renderer.ts"],"names":["Renderer","constructor","width","window","innerWidth","height","innerHeight","aspect","this","renderer","setSize","camera","PerspectiveCamera","position","z","render","scene","d","color","points","geometry","assert","equal","length","i","p","isNaN","isFinite","Math","sign","console","warn","setAttribute","BufferAttribute","computeBoundingSphere","s","boundingSphere","min","center","radius","requestAnimationFrame","WebGLRenderer","onresize","Points","BufferGeometry","PointsMaterial","vertexColors","VertexColors","size","Scene","add","domElement"],"mappings":"yRAaO,MAAMA,EAOXC,cAAc,4GAFF,GAEE,iBAoBI,KAChB,IACMC,EAAQC,OAAOC,WACfC,EAASF,OAAOG,YAChBC,EAASL,EAAQG,EAGvBG,KAAKC,SAASC,QAAQR,EAAOG,GAC7BG,KAAKG,OAAS,IAAIC,IAHN,IAG6BL,EAP5B,IAAY,KAQzBC,KAAKG,OAAOE,SAASC,EAAIN,KAAKM,IA7BlB,gBAoCL,KACPN,KAAKC,SAASM,OAAOP,KAAKQ,MAAOR,KAAKG,UArC1B,sBAwCE,IAAiC,IAAjC,EAAEM,EAAF,SAAKJ,EAAL,MAAeK,GAAkB,GACzC,OAAEC,GAAWX,KACbY,EAAWD,EAAOC,SACxBC,IAAOC,MAAMT,EAASU,OAASN,EAAG,GAClCI,IAAOC,MAAMJ,EAAMK,OAAS,EAAG,GAE/B,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAASU,OAAQC,IAAK,CACxC,IAAMC,EAAIZ,EAASW,IACfE,MAAMD,IAAOE,SAASF,KACxBZ,EAASW,GAAK,GAAK,GAAK,EACnBE,MAAMD,KAAIZ,EAASW,IAAMI,KAAKC,KAAKJ,IACxCK,QAAQC,KAAR,sBAA4BN,EAA5B,qBAA0CD,EAA1C,wBAA2DX,EAASW,GAApE,oBAIJJ,EAASY,aAAa,WAAY,IAAIC,IAAgBpB,EAAUI,IAChEG,EAASY,aAAa,QAAS,IAAIC,IAAgBf,EAAO,IAE1D,IAAIJ,EAAI,EACR,GAAIG,EAAI,EAAG,CACTG,EAASc,wBACT,IAAMC,EAAIf,EAASgB,eACnBtB,EAAIc,KAAKS,IAAI,EAAGF,EAAEG,OAAOxB,EAAIqB,EAAEI,OAAS,GAE1C/B,KAAKG,OAAOE,SAASC,EAAIN,KAAKM,EAAIA,EAElC0B,sBAAsBhC,KAAKO,UAjE3BP,KAAKC,SAAW,IAAIgC,IACpBjC,KAAKE,UACLP,OAAOuC,SAAW,KAChBlC,KAAKE,UACL8B,sBAAsBhC,KAAKO,SAG7BP,KAAKW,OAAS,IAAIwB,IAChB,IAAIC,IACJ,IAAIC,IAAe,CACjBC,aAAcC,IACdC,KAAM,QAIVxC,KAAKQ,MAAQ,IAAIiC,IACjBzC,KAAKQ,MAAMkC,IAAI1C,KAAKW,QAetB,iBACE,OAAOX,KAAKC,SAAS0C","file":"7.a972b521a2956c95757c.js","sourcesContent":["import {\n  PerspectiveCamera,\n  BufferGeometry,\n  BufferAttribute,\n  Points,\n  PointsMaterial,\n  WebGLRenderer,\n  VertexColors,\n  Scene,\n} from 'three';\nimport { Data } from '../core/data';\nimport assert from 'assert';\n\nexport class Renderer {\n  private renderer: WebGLRenderer;\n  private scene: Scene;\n  private camera: PerspectiveCamera;\n  private points: Points;\n  private z = 5;\n\n  constructor() {\n    this.renderer = new WebGLRenderer();\n    this.setSize();\n    window.onresize = () => {\n      this.setSize();\n      requestAnimationFrame(this.render);\n    };\n\n    this.points = new Points(\n      new BufferGeometry(),\n      new PointsMaterial({\n        vertexColors: VertexColors,\n        size: 0.001,\n      })\n    );\n\n    this.scene = new Scene();\n    this.scene.add(this.points);\n  }\n\n  private setSize = () => {\n    const near = 0.01, far = 1000;\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    const aspect = width / height;\n    const fov = 100;\n\n    this.renderer.setSize(width, height);\n    this.camera = new PerspectiveCamera(fov, aspect, near, far);\n    this.camera.position.z = this.z;\n  };\n\n  get domElement() {\n    return this.renderer.domElement;\n  }\n\n  render = () => {\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  updatePoints = ({ d, position, color }: Data) => {\n    const { points } = this;\n    const geometry = points.geometry as BufferGeometry;\n    assert.equal(position.length % d, 0);\n    assert.equal(color.length % 3, 0);\n\n    for (let i = 0; i < position.length; i++) {\n      const p = position[i];\n      if (isNaN(p) || !isFinite(p)) {\n        position[i] = 2 ** 32 - 1;\n        if (!isNaN(p)) position[i] *= Math.sign(p);\n        console.warn(`found value ${p} at index ${i}; setting to ${position[i]} for rendering`);\n      }\n    }\n\n    geometry.setAttribute('position', new BufferAttribute(position, d));\n    geometry.setAttribute('color', new BufferAttribute(color, 3));\n\n    let z = 5;\n    if (d > 2) {\n      geometry.computeBoundingSphere();\n      const s = geometry.boundingSphere;\n      z = Math.min(5, s.center.z + s.radius + 1);\n    }\n    this.camera.position.z = this.z = z;\n\n    requestAnimationFrame(this.render);\n  };\n}\n"],"sourceRoot":""}