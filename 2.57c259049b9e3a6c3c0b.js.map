{"version":3,"sources":["webpack:///./src/web/inputs/index.ts","webpack:///./src/core/pp.ts","webpack:///./src/core/data.ts","webpack:///./src/core/pipe/pool.ts","webpack:///./src/core/fn/interval.ts","webpack:///./src/core/constants.ts","webpack:///./src/core/pipe/pipe.worker.ts","webpack:///./src/core/fn/cube.ts","webpack:///./src/core/fn/fn.ts","webpack:///./src/core/fn/rotator.ts","webpack:///./src/core/fn/sphere.ts","webpack:///./src/core/fn/fucked_up_torus.ts","webpack:///./src/core/fn/identity.ts","webpack:///./src/core/fn/spiral.ts","webpack:///./src/core/fn/stereo.ts","webpack:///./src/core/fn/torus.ts","webpack:///./src/core/pipe/resolver.ts","webpack:///./src/web/renderer.ts"],"names":["temp","persistenceEnabled","URLSearchParams","window","location","search","get","hash","substr","atob","AbstractInput","constructor","id","_value","persistent","this","has","parse","updateHash","BehaviorSubject","newValue","el","_setup","str","stringify","value","set","document","btoa","toString","initFromOrWriteToHash","subject","newSubject","Error","asObservable","oldValue","next","event","TextInput","super","onchange","oninput","size","length","stream","subscribe","text","ToggleInput","disabled","on","querySelector","onclick","off","style","display","test","bool","n","poolSize","inputs","pipe","theta","h","v","animate","mic","fullscreen","fullscreenEnabled","allowedDbs","input","multirange","minEl","maxEl","valueLow","valueHigh","innerText","min","max","split","parseInt","save","action","ev","canvas","renderer","domElement","render","blob","Promise","resolve","toBlob","url","URL","createObjectURL","a","createElement","download","href","click","revokeObjectURL","debug","pp","p","JSON","Data","d","position","color","buffer","data","Float32Array","nOffset","positionOffset","d0","SharedArrayBuffer","inputOffset","arr","offset","subarray","inputLength","positionLength","colorOffset","i","stride","assert","pool","logger","getLogger","setLevel","navigator","hardwareConcurrency","startPool","info","Pool","spawn","Worker","name","Map","promises","push","queue","all","initialize","params","timing","forkJoin","chunk","w","iterate","getOrInitialize","key","hv","getKey","resolver","Resolver","scope","staticFn","dynamicFn","bufferFor","op","Math","round","label","start","Date","now","t","elapsed","runPipeline","slice","Interval","b","x","y","equal","limit","fn","nPerLevel","points","pop","successors","domain","pow","inf","module","exports","Cube","l","interval","sample","Array","fill","cos","sin","exp","tan","tanh","components","from","keys","CompositeFn","fns","first","rest","apply","domainMax","dMax","last","reduce","f","isFinite","sign","Rotator","d1","f0","f1","cube","r0","r1","Sphere","r","PI","phi","root","map","FuckedUpTorus","sphere","circle","q","Identity","Spiral","k","Stereo","to","fromTemp","toTemp","up","down","n2","norm2","divisor","result","Torus","cross","rotator","head","tail","steps","links","link","resolveStep","buildComposites","builder","Builder","isDynamic","add","shift","init","build","type","args","ranges","funs","some","isNodeDynamic","index","target","idu","toUpperCase","fail","operands","ops","node","kind","hint","resolvePipe","resolveFn","resolveAccess","resolveId","resolveArith","actual","isNaN","spiral","torus","fucked_up_torus","rotate","stereo","width","innerWidth","height","innerHeight","aspect","setSize","camera","PerspectiveCamera","z","scene","geometry","setAttribute","BufferAttribute","computeBoundingSphere","s","boundingSphere","center","radius","requestAnimationFrame","WebGLRenderer","onresize","Points","BufferGeometry","PointsMaterial","vertexColors","VertexColors","Scene"],"mappings":"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","file":"2.57c259049b9e3a6c3c0b.js","sourcesContent":["import multirange from 'multirange';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\nimport { poolSize } from '../../core/pipe/pool';\nimport debug from '../debug';\nimport { renderer } from '../renderer';\n\ntype Change<T> = {\n  newValue: T;\n  oldValue?: T;\n  event?: Event;\n};\n\nconst query = new URLSearchParams(window.location.search);\nconst persistenceEnabled = query.get('p') != '0';\nconst hash = (() => {\n  const temp = window.location.hash.substr(1);\n  return new URLSearchParams(temp ? atob(temp) : '');\n})();\n\nexport abstract class AbstractInput<T, E = HTMLElement> {\n  private readonly subject: Subject<Change<T>>;\n  protected el?: E;\n\n  constructor(\n    readonly id: string,\n    private _value: T,\n    private readonly persistent: boolean,\n  ) {\n    if (persistenceEnabled) {\n      this.initFromOrWriteToHash();\n    } else {\n      this.persistent = false;\n    }\n    this.subject = this.newSubject();\n  }\n\n  initFromOrWriteToHash = () => {\n    if (this.persistent && hash.has(this.id)) {\n      this._value = this.parse(hash.get(this.id));\n    } else if (this.persistent) {\n      this.updateHash();\n    }\n  };\n\n  newSubject = () => new BehaviorSubject({ newValue: this._value });\n\n  setup = (el: E) => {\n    this.el = el;\n    this._setup();\n  };\n\n  protected abstract _setup(): void;\n\n  protected parse(str: string): T {\n    throw new Error('parse unsupported');\n  }\n\n  protected stringify(value: T): string {\n    throw new Error('stringify unsupported');\n  }\n\n  get stream() {\n    return this.subject.asObservable();\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(newValue: T) {\n    const oldValue = this.value;\n    this._value = newValue;\n    this.subject.next({ newValue, oldValue, event: window.event });\n    if (this.persistent) this.updateHash();\n  }\n\n  private updateHash = () => {\n    const str = this.stringify(this.value);\n    hash.set(this.id, str);\n    document.location.hash = btoa(hash.toString());\n  };\n}\n\ntype TextInputId = 'pipe' | 'theta' | 'h' | 'v';\n\nexport class TextInput extends AbstractInput<string, HTMLInputElement> {\n  readonly disabled = false;\n\n  constructor(readonly id: TextInputId, _value: string, persistent = true) {\n    super(id, _value, persistent);\n  }\n\n  protected _setup = () => {\n    this.el.onchange = () => (this.value = this.el.value);\n    this.el.oninput = () => (this.el.size = this.el.value.length);\n\n    this.stream.subscribe(({ newValue }) => {\n      this.el.value = newValue;\n      this.el.size = newValue.length;\n    });\n  };\n\n  protected parse(str: string) {\n    return str;\n  }\n\n  protected stringify(text: string) {\n    return text;\n  }\n}\n\ntype ToggleInputId = 'animate' | 'mic' | 'fullscreen';\n\nexport class ToggleInput extends AbstractInput<boolean> {\n  constructor(\n    readonly id: ToggleInputId,\n    _value: boolean,\n    readonly disabled: boolean = false,\n    persistent = true,\n  ) {\n    super(id, _value, persistent);\n  }\n\n  protected _setup = () => {\n    const on = this.el.querySelector<HTMLInputElement>('.on');\n    on.onclick = () => (this.value = true);\n\n    const off = this.el.querySelector<HTMLInputElement>('.off');\n    off.onclick = () => (this.value = false);\n\n    this.stream.subscribe(({ newValue }) => {\n      if (newValue) {\n        on.style.display = 'none';\n        off.style.display = 'inline';\n      } else {\n        on.style.display = 'inline';\n        off.style.display = 'none';\n      }\n    });\n  };\n\n  protected parse(str: string) {\n    if (/1|true/i.test(str)) return true;\n    else if (/0|false/i.test(str)) return false;\n    else throw new Error(`invalid boolean value for input ${this.id}: ${str}`);\n  }\n\n  protected stringify(bool: boolean) {\n    return bool ? '1' : '0';\n  }\n}\n\ntype RangeInputId = 'allowed_db_range';\n\nexport class RangeInput extends AbstractInput<[number, number]> {\n  constructor(\n    readonly id: RangeInputId,\n    _value: [number, number],\n    readonly disabled: boolean = false,\n    persistent = true,\n  ) {\n    super(id, _value, persistent);\n  }\n\n  protected _setup = () => {\n    const input = this.el.querySelector<MultirangeHTMLInputElement>('input');\n    multirange(input);\n    const minEl = this.el.querySelector<HTMLElement>('.min');\n    const maxEl = this.el.querySelector<HTMLElement>('.max');\n\n    input.onchange = () => {\n      this.value = [+input.valueLow, +input.valueHigh];\n    };\n\n    this.el.querySelector<HTMLInputElement>(\n      'input.ghost',\n    ).oninput = input.oninput = () => {\n      minEl.innerText = input.valueLow.toString();\n      maxEl.innerText = input.valueHigh.toString();\n    };\n\n    this.stream.subscribe(({ newValue }) => {\n      input.value = this.stringify(newValue);\n      minEl.innerText = input.valueLow.toString();\n      maxEl.innerText = input.valueHigh.toString();\n    });\n  };\n\n  protected parse(str: string): [number, number] {\n    const [min, max] = str.split(/,/);\n    return [parseInt(min), parseInt(max)];\n  }\n\n  protected stringify([min, max]) {\n    return `${min},${max}`;\n  }\n}\n\nexport class ActionInput extends AbstractInput<void> {\n  constructor(\n    id: string,\n    private readonly action: (ev: MouseEvent) => void,\n    readonly disabled: boolean = false,\n  ) {\n    super(id, null, false);\n  }\n\n  protected _setup = () => {\n    this.el.onclick = ev => this.action(ev);\n  };\n}\n\n// Points generation is done in parallel, so pick n such\n// that each chunk is size 2000\nconst n = 2000 * poolSize;\n\nexport const inputs = {\n  pipe: new TextInput(\n    'pipe',\n    `${n}->3->torus(1, 1)->R(theta, 0, 1, cos, tan)->R(theta, 0, 2)->R(theta, 0, 3)->stereo(3)`,\n  ),\n  theta: new TextInput('theta', 'pi * power + pi * t / 20'),\n  h: new TextInput('h', 'chroma * abs(p[0])'),\n  v: new TextInput('v', '(power + onset) / 2'),\n  animate: new ToggleInput('animate', true, false, true),\n  mic: new ToggleInput('mic', false, false, false),\n  fullscreen: new ToggleInput(\n    'fullscreen',\n    false,\n    !document.fullscreenEnabled,\n    false,\n  ),\n  allowedDbs: new RangeInput('allowed_db_range', [-130, -30]),\n  save: new ActionInput('save', async () => {\n    const canvas = renderer.domElement;\n    renderer.render();\n    const blob = await new Promise(resolve => canvas.toBlob(resolve));\n    const url = URL.createObjectURL(blob);\n    try {\n      const a = document.createElement('a');\n      a.download = `stereo${document.location.hash}`;\n      a.href = url;\n      a.click();\n    } finally {\n      URL.revokeObjectURL(url);\n    }\n  }),\n};\nexport type Inputs = typeof inputs;\n\ndebug('inputs', inputs);\n","export const pp = (a: any, p = 2) => JSON.stringify(a, null, p);\n","import assert from 'assert';\n\nexport type Vector = Float32Array;\n\nexport class Data {\n  constructor(\n    readonly n: number,\n    readonly d: number,\n    readonly position: Float32Array,\n    readonly color: Float32Array,\n  ) {}\n\n  static fromBuffer = (buffer: ArrayBuffer) => {\n    const data = new Float32Array(buffer);\n    const n = data[Data.nOffset];\n    const d = data[Data.positionOffset(data)];\n    const position = Data.position(data);\n    const color = Data.color(data);\n    return new Data(n, d, position, color);\n  };\n\n  static bufferFor = (n: number, d0: number, d: number): SharedArrayBuffer => {\n    const bytesPerNum = 4;\n    const count = 3 + n * (d0 + d + 3);\n    const byteLength = bytesPerNum * count;\n    const buffer = new SharedArrayBuffer(byteLength);\n    const data = new Float32Array(buffer);\n    data[Data.nOffset] = n;\n    data[Data.inputOffset] = d0;\n    data[Data.positionOffset(data)] = d;\n    return buffer;\n  };\n\n  static input = (arr: Float32Array) => {\n    const offset = Data.inputOffset + 1;\n    return arr.subarray(offset, offset + Data.inputLength(arr));\n  };\n\n  static position = (arr: Float32Array) => {\n    const offset = Data.positionOffset(arr) + 1;\n    return arr.subarray(offset, offset + Data.positionLength(arr));\n  };\n\n  static color = (arr: Float32Array) => {\n    const offset = Data.colorOffset(arr);\n    return arr.subarray(offset);\n  };\n\n  static nOffset = 0;\n\n  static inputOffset = Data.nOffset + 1;\n  private static inputLength = (arr: Float32Array) => {\n    const n = arr[Data.nOffset];\n    const d0 = arr[Data.inputOffset];\n    return n * d0;\n  };\n\n  static positionOffset = (arr: Float32Array) =>\n    Data.inputOffset + Data.inputLength(arr) + 1;\n  private static positionLength = (arr: Float32Array) => {\n    const n = arr[Data.nOffset];\n    const d = arr[Data.positionOffset(arr)];\n    return n * d;\n  };\n\n  static colorOffset = (arr: Float32Array) =>\n    Data.positionOffset(arr) + Data.positionLength(arr) + 1;\n\n  static get = (arr: Vector, i: number, stride: number) => {\n    const offset = i * stride;\n    return arr.subarray(offset, offset + stride);\n  };\n\n  static set = (\n    arr: Vector,\n    value: ArrayLike<number>,\n    i: number,\n    stride: number,\n  ) => {\n    assert(value.length <= stride);\n    const offset = i * stride;\n    return arr.set(value, offset);\n  };\n}\n","import { spawn, Worker, Pool, ModuleThread } from 'threads';\nimport { getLogger } from 'loglevel';\nimport { Params, PipelineWorker, Chunk } from './types';\nimport { Data } from '../data';\nimport { Resolver, Resolution } from './resolver';\n\nconst logger = getLogger('PipelinePool');\nlet pool: Pool<ModuleThread<PipelineWorker>>;\nlet data: Map<string, SharedArrayBuffer>;\nlogger.setLevel('info');\n\nexport const poolSize = 2 * navigator.hardwareConcurrency;\n\nexport const startPool = async () => {\n  logger.info('starting worker pool');\n  let i = 0;\n  pool = Pool(\n    () => spawn(new Worker('./pipe.worker', { name: `pipe${i++}` })),\n    poolSize,\n  );\n  data = new Map();\n  let promises = [];\n  for (let i = 0; i < poolSize; i++) {\n    // pre-load scripts so the first task doesn't take forever\n    promises.push(pool.queue(async () => {}));\n  }\n  await Promise.all(promises);\n};\n\nexport const stopPool = async (): Promise<void> => {\n  logger.info('waiting for pending tasks to complete before terminating pool');\n  try {\n    await pool.terminate(true);\n  } catch (err) {\n    logger.error(err);\n  } finally {\n    pool = null;\n  }\n};\n\nconst initialize = (\n  params: Params,\n  n: number,\n  buffer: SharedArrayBuffer,\n): Promise<void> => {\n  return timing('initialization')(async () => {\n    return forkJoin(n, async chunk => {\n      return pool.queue(w => w.initialize(params, chunk, buffer));\n    });\n  });\n};\n\nconst iterate = (params: Params, buffer: SharedArrayBuffer) => {\n  return timing('iteration')(async () => {\n    return forkJoin(params.pipe.n, async chunk => {\n      return pool.queue(w => w.iterate(params, chunk, buffer));\n    });\n  });\n};\n\nconst getKey = (params: Params) =>\n  JSON.stringify({\n    pipe: params.pipe,\n    hv: params.hv,\n  });\n\nconst getOrInitialize = async (params: Params): Promise<SharedArrayBuffer> => {\n  const key = getKey(params);\n  if (!data.has(key)) {\n    const resolver = new Resolver(params.scope);\n    const { n, staticFn, dynamicFn } = resolver.resolve(params.pipe);\n    const buffer = Data.bufferFor(n, staticFn.d, dynamicFn.d);\n    await initialize(params, n, buffer);\n    data.set(key, buffer);\n  }\n  return data.get(key);\n};\n\nconst forkJoin = async (n: number, op: (chunk: Chunk) => Promise<void>) => {\n  const size = Math.round(n / poolSize);\n  let promises = [];\n  for (let offset = 0; offset < n; offset += size) {\n    const chunk = { offset, size: Math.min(n - offset, size) };\n    promises.push(op(chunk));\n  }\n  await Promise.all(promises);\n};\n\nconst timing = (label: string) => async <T>(op: () => Promise<T>) => {\n  const start = Date.now();\n  const t = await op();\n  const elapsed = Date.now() - start;\n  logger.debug(`${label} took ${elapsed}ms`);\n  return t;\n};\n\nexport const runPipeline = async (\n  params: Params,\n): Promise<SharedArrayBuffer> => {\n  const buffer = await getOrInitialize(params);\n  await iterate(params, buffer);\n\n  return buffer.slice(0);\n};\n","import { Fn } from './fn';\nimport assert from 'assert';\nimport { Vector } from '../data';\n\nexport default class Interval implements Fn {\n  readonly domain: number;\n\n  constructor(readonly d: number, readonly a: number[], readonly b: number[]) {\n    assert.equal(a.length, d);\n    assert.equal(b.length, d);\n    this.domain = d;\n  }\n\n  static nPerLevel = (d: number, n: number) => {\n    return Math.round(Math.pow(n, 1 / d));\n  };\n\n  /**\n   * @param x A vector of length this.domain contained in the interval [0, 1].\n   * @returns A mapping of the vector into this interval.\n   */\n  fn = (x: Float32Array, y: Vector = new Float32Array(this.d)) => {\n    const { a, b, d } = this;\n    assert.equal(x.length, d);\n    assert.equal(y.length, d);\n    for (let i = 0; i < d; i++) {\n      y[i] = a[i] + x[i] * (b[i] - a[i]);\n    }\n    return y;\n  };\n\n  sample = function*(n: number, offset: number, limit: number) {\n    const { d, fn } = this;\n    n = Interval.nPerLevel(d, n);\n    const points: number[][] = [[]];\n    let i = 0;\n\n    while (points.length && i < limit) {\n      const p = points.pop()!;\n      if (p.length < d) {\n        points.push(...successors(p));\n      } else if (i++ >= offset) {\n        yield fn(p);\n      }\n    }\n\n    function* successors(p: number[]): Generator<number[]> {\n      for (let i = 0; i < n; i++) {\n        yield [...p, i / n];\n      }\n    }\n  };\n}\n","export const inf = 2 ** 32 - 1;\n","module.exports = __webpack_public_path__ + \"0.65c8606e179d48bfb296.worker.js\"","import Interval from './interval';\nimport { Fn } from './fn';\nimport { Vector } from '../data';\n\nexport default class Cube implements Fn {\n  private readonly interval: Interval;\n\n  constructor(readonly d: number, readonly l: number) {\n    this.interval = new Interval(\n      d,\n      new Array(d).fill(-l / 2),\n      new Array(d).fill(l / 2),\n    );\n  }\n\n  get domain() {\n    return this.d;\n  }\n\n  fn = (x: Vector, y?: Vector) => this.interval.fn(x, y);\n\n  sample = (n: number, offset: number, limit: number) =>\n    this.interval.sample(n, offset, limit);\n}\n","import { Vector } from '../data';\nimport assert from 'assert';\nimport { inf } from '../constants';\n\nexport const cos = Math.cos;\nexport const sin = Math.sin;\nexport const tan = Math.tan;\nexport const tanh = Math.tanh;\nexport const exp = Math.exp;\n\nexport const components = d => Array.from(new Array(d).keys());\n\nexport interface Fn {\n  readonly d: number;\n  readonly domain: number;\n  fn(x: Vector, y?: Vector): Vector;\n  sample(n: number, offset: number, limit: number): Generator<Vector>;\n}\n\nexport class CompositeFn implements Fn {\n  private readonly x: Vector;\n  private readonly y: Vector;\n  constructor(readonly fns: Fn[]) {\n    assert(fns.length, 'fns cannot be empty');\n\n    const length = Math.max(this.domainMax, this.dMax);\n    this.x = new Float32Array(length);\n    this.y = new Float32Array(length);\n  }\n\n  get first() {\n    return this.fns[0];\n  }\n\n  get last() {\n    return this.fns[this.fns.length - 1];\n  }\n\n  get domain() {\n    return this.first.domain;\n  }\n\n  get d() {\n    return this.last.d;\n  }\n\n  get domainMax() {\n    return this.fns.reduce((max, f) => Math.max(f.domain, max), 0);\n  }\n\n  get dMax() {\n    return this.fns.reduce((max, f) => Math.max(f.d, max), 0);\n  }\n\n  sample = function*(n: number, offset: number, limit: number) {\n    const { fns, d } = this;\n    const [first, ...rest] = fns;\n    if (fns.length == 0) return [];\n\n    for (const x of first.sample(n, offset, limit)) {\n      this.x.set(x);\n      if (rest.length) {\n        CompositeFn.apply(rest, this.x, this.y);\n      } else {\n        this.y.set(x);\n      }\n      yield this.y.subarray(0, d);\n    }\n  };\n\n  fn = (x: Vector, y: Vector = new Float32Array(this.d)) => {\n    const { fns, domain, d } = this;\n    assert.equal(x.length, domain);\n    assert.equal(y.length, d);\n\n    this.x.set(x);\n    CompositeFn.apply(fns, this.x, this.y);\n    y.set(this.y.subarray(0, d));\n    return y;\n  };\n\n  private static apply = (fns: Fn[], x: Vector, y: Vector) => {\n    assert.equal(x.length, y.length);\n    for (const f of fns) {\n      f.fn(x.subarray(0, f.domain), y.subarray(0, f.d));\n      for (let i = 0; i < y.length; i++) {\n        if (!isFinite(y[i])) y[i] = Math.sign(y[i]) * inf;\n      }\n      x.set(y);\n    }\n  };\n\n  static Builder = class {\n    private readonly fns: Fn[] = [];\n\n    get d() {\n      return this.last.d;\n    }\n\n    get last() {\n      return this.fns[this.fns.length - 1];\n    }\n\n    add = (fn: Fn) => {\n      const { fns, last } = this;\n      if (last && fn.domain !== last.d) {\n        throw new Error(\n          `Cannot add ${fn} to composite, because its domain is not ${last.d}`,\n        );\n      }\n      fns.push(fn);\n      return this;\n    };\n\n    build = () => {\n      return new CompositeFn(this.fns);\n    };\n  };\n}\n","import { Fn, cos, sin } from './fn';\nimport Cube from './cube';\nimport { Vector } from '../data';\nimport assert from 'assert';\n\nexport default class Rotator implements Fn {\n  readonly r0: number;\n  readonly r1: number;\n\n  constructor(\n    readonly d: number,\n    readonly theta: number,\n    readonly d0: number,\n    readonly d1: number,\n    readonly f0: (theta: number) => number = cos,\n    readonly f1: (theta: number) => number = sin,\n  ) {\n    this.r0 = f0(theta);\n    this.r1 = f1(theta);\n  }\n\n  get domain() {\n    return this.d;\n  }\n\n  sample = function*(n: number, offset: number, limit: number) {\n    const cube = new Cube(this.domain, 2);\n    for (const p of cube.sample(n, offset, limit)) {\n      yield this.fn(p);\n    }\n  };\n\n  fn = (x: Vector, y: Vector = new Float32Array(this.d)) => {\n    const { d, d0, d1, r0, r1 } = this;\n    assert.equal(x.length, d);\n    assert.equal(y.length, d);\n    y.set(x);\n\n    const a = x[d0],\n      b = x[d1];\n    y[d0] = a * r0 - b * r1;\n    y[d1] = a * r1 + b * r0;\n    return y;\n  };\n}\n","import Rotator from './rotator';\nimport Cube from './cube';\nimport { Fn, components, CompositeFn } from './fn';\nimport { TypedArray } from 'three';\nimport { Vector } from '../data';\nimport assert from 'assert';\n\nexport default class Sphere implements Fn {\n  private readonly root: Float32Array;\n\n  constructor(readonly d: number, r: number) {\n    this.root = new Float32Array(d);\n    this.root[0] = r;\n  }\n\n  get domain() {\n    return this.d - 1;\n  }\n\n  sample = function*(n: number, offset: number, limit: number) {\n    const cube = new Cube(this.domain, 2 * Math.PI);\n    for (const phi of cube.sample(n, offset, limit)) {\n      yield this.fn(phi);\n    }\n  };\n\n  fn = (phi: Vector, y: Vector = new Float32Array(this.d)) => {\n    const { d, root } = this;\n    assert.equal(phi.length, d - 1);\n    assert.equal(y.length, d);\n\n    const r = new CompositeFn(\n      components(d - 1).map(i => new Rotator(d, phi[i], 0, i + 1)),\n    );\n    r.fn(root, y);\n    return y;\n  };\n}\n","import Cube from './cube';\nimport Sphere from './sphere';\nimport { Fn } from './fn';\nimport { Vector } from '../data';\nimport assert from 'assert';\n\n// This shape does not implement a torus. It used to,\n// but then I changed the way Rotator works, which\n// changed the way that the points of the sphere are\n// distributed, making the translation step behave incorrectly\n// Still makes a cool shape though, so keeping it\nexport default class FuckedUpTorus implements Fn {\n  private readonly sphere: Sphere;\n  private readonly circle: Sphere;\n\n  constructor(readonly d: number, readonly r: number, readonly t: number) {\n    this.sphere = new Sphere(d, t);\n    this.circle = new Sphere(2, r);\n  }\n\n  get domain() {\n    return this.d - 1;\n  }\n\n  sample = function*(n: number, offset: number, limit: number) {\n    const cube = new Cube(this.domain, 2 * Math.PI);\n    for (const phi of cube.sample(n, offset, limit)) {\n      yield this.fn(phi);\n    }\n  };\n\n  fn = (phi: Vector, y: Vector = new Float32Array(this.d)) => {\n    const { domain, d, sphere, circle } = this;\n    assert.equal(phi.length, domain);\n    assert.equal(y.length, d);\n    sphere.fn(phi, y);\n    const q = circle.fn(phi.subarray(d - 2));\n    y[0] += q[0];\n    y[d - 1] += q[1];\n    return y;\n  };\n}\n","import { Fn } from './fn';\nimport Cube from './cube';\nimport { Vector } from '../data';\nimport assert from 'assert';\n\nexport class Identity implements Fn {\n  readonly domain: number;\n\n  constructor(readonly d: number) {\n    this.domain = d;\n  }\n\n  fn = (x: Vector, y: Vector = new Float32Array(this.d)) => {\n    const { d } = this;\n    assert.equal(x.length, d);\n    assert.equal(y.length, d);\n    y.set(x);\n    return y;\n  };\n\n  sample = function*(n: number, offset: number, limit: number) {\n    throw new Error('identity function does not support sampling');\n  };\n}\n","import { Fn, exp, components } from './fn';\nimport Cube from './cube';\nimport Sphere from './sphere';\nimport assert from 'assert';\nimport { Vector } from '../data';\n\nexport default class Spiral implements Fn {\n  private readonly sphere: Sphere;\n\n  constructor(readonly d: number, readonly a: number[], readonly k: number[]) {\n    this.sphere = new Sphere(d, 1);\n  }\n\n  get domain() {\n    return this.d - 1;\n  }\n\n  sample = function*(n: number, offset: number, limit: number) {\n    const cube = new Cube(this.domain, 4 * Math.PI);\n    for (const phi of cube.sample(n, offset, limit)) {\n      yield this.fn(phi);\n    }\n  };\n\n  fn = (phi: Float32Array, y: Vector = new Float32Array(this.d)) => {\n    const { a, k, domain, d } = this;\n    assert.equal(phi.length, d - 1);\n    assert.equal(y.length, d);\n\n    this.sphere.fn(phi, y);\n    let x = 0;\n    for (let i = 0; i < domain; i++) {\n      x += k[i] * phi[i];\n    }\n    const r = exp(x);\n    for (let i = 0; i < d; i++) {\n      y[i] = y[i] * a[i] * r;\n    }\n    return y;\n  };\n}\n","import { Fn } from './fn';\nimport Cube from './cube';\nimport { Vector } from '../data';\nimport assert from 'assert';\n\nexport default class Stereo implements Fn {\n  private readonly fromTemp: Vector;\n  private readonly toTemp: Vector;\n\n  constructor(private readonly from: number, private readonly to: number) {\n    this.fromTemp = new Float32Array(Math.max(from, to));\n    this.toTemp = new Float32Array(Math.max(from, to));\n  }\n\n  get domain() {\n    return this.from;\n  }\n\n  get d() {\n    return this.to;\n  }\n\n  sample = function*(n: number, offset: number, limit: number) {\n    const cube = new Cube(this.domain, 2);\n    for (const phi of cube.sample(n, offset, limit)) {\n      yield this.fn(phi);\n    }\n  };\n\n  fn = (x: Vector, y: Vector = new Float32Array(this.to)) => {\n    let { from, to, fromTemp, toTemp } = this;\n    assert.equal(x.length, from);\n    assert.equal(y.length, to);\n\n    if (from === to) {\n      y.set(x);\n      return y;\n    }\n\n    fromTemp.set(x);\n\n    while (from < to) {\n      Stereo.up(fromTemp.subarray(0, from), toTemp.subarray(0, ++from));\n      fromTemp.set(toTemp);\n    }\n\n    while (from > to) {\n      Stereo.down(fromTemp.subarray(0, from), toTemp.subarray(0, --from));\n      fromTemp.set(toTemp);\n    }\n\n    y.set(toTemp.subarray(0, to));\n    return y;\n  };\n\n  static up = (x: Vector, temp: Vector) => {\n    assert.equal(temp.length, x.length + 1);\n    const n2 = norm2(x);\n    const divisor = n2 + 1;\n    temp[0] = (n2 - 1) / divisor;\n    for (let i = 1; i <= x.length; i++) {\n      temp[i] = (2 * x[i - 1]) / divisor;\n    }\n  };\n\n  static down = (x: Vector, temp: Vector) => {\n    assert.equal(temp.length, x.length - 1);\n    for (let i = 0; i < temp.length; i++) {\n      temp[i] = x[i + 1] / (1 - x[0]);\n    }\n  };\n}\n\nconst norm2 = (x: Vector) => {\n  let result = 0;\n  for (let i = 0; i < x.length; i++) {\n    result += x[i] * x[i];\n  }\n  return result;\n};\n","import Cube from './cube';\nimport Sphere from './sphere';\nimport { Fn } from './fn';\nimport Rotator from './rotator';\nimport assert from 'assert';\nimport { Vector } from '../data';\n\nexport default class Torus implements Fn {\n  private readonly cross: Sphere;\n\n  constructor(readonly d: number, readonly r: number, readonly t: number) {\n    assert(d > 2, `torus is only defined for d > 2; got ${d}`);\n    this.cross = new Sphere(d - 1, t);\n  }\n\n  get domain() {\n    return this.d - 1;\n  }\n\n  sample = function*(n: number, offset: number, limit: number) {\n    const cube = new Cube(this.domain, 2 * Math.PI);\n    for (const phi of cube.sample(n, offset, limit)) {\n      yield this.fn(phi);\n    }\n  };\n\n  fn = (theta: Vector, y: Vector = new Float32Array(this.d)) => {\n    const { cross, d, r } = this;\n    assert.equal(\n      theta.length,\n      d - 1,\n      `torus expects an input of ${d - 1}; got ${theta.length}`,\n    );\n    const rotator = new Rotator(d, theta[d - 2], 0, d - 1);\n\n    cross.fn(theta.subarray(0, d - 2), y.subarray(0, d - 1));\n    y[0] += r;\n    rotator.fn(y, y);\n\n    return y;\n  };\n}\n","import assert from 'assert';\n\nimport Cube from '../fn/cube';\nimport { CompositeFn, Fn } from '../fn/fn';\nimport FuckedUpTorus from '../fn/fucked_up_torus';\nimport { Identity } from '../fn/identity';\nimport Rotator from '../fn/rotator';\nimport Sphere from '../fn/sphere';\nimport Spiral from '../fn/spiral';\nimport Stereo from '../fn/stereo';\nimport Torus from '../fn/torus';\nimport { pp } from '../pp';\n\nimport {\n  AccessNode,\n  ArithNode,\n  FnNode,\n  PipeNode,\n  Scalar,\n  StepNode,\n  Value,\n} from './ast';\nimport { Link, Scope, UnaryOperator } from './types';\n\nexport type Resolution = {\n  n: number;\n  staticFn: CompositeFn;\n  dynamicFn: CompositeFn;\n};\n\nexport class Resolver {\n  constructor(private readonly scope: Scope) {}\n\n  resolve(node: PipeNode): Resolution;\n  resolve(node: Scalar, hint: 'number'): number;\n  resolve(node: Scalar, hint: 'function'): Function;\n  resolve(node: Scalar): Value;\n  resolve(node: any, hint?: any): any {\n    let value;\n    switch (node.kind) {\n      case 'pipe':\n        value = this.resolvePipe(node);\n        break;\n      case 'number':\n        value = node.value;\n        break;\n      case 'fn':\n        value = this.resolveFn(node);\n        break;\n      case 'access':\n        value = this.resolveAccess(node);\n        break;\n      case 'id':\n        value = this.resolveId(node.id);\n        break;\n      case 'arith':\n        value = this.resolveArith(node);\n        break;\n    }\n\n    if (hint) {\n      const actual = typeof value;\n      assert.equal(\n        actual,\n        hint,\n        `Expected identifier ${node.id} to resolve to a ${hint}, but was ${actual} instead.`,\n      );\n\n      if (hint === 'number' && isNaN(value))\n        assert.fail(\n          `Expected node ${pp(\n            node,\n          )} to resolve to a valid value, but was NaN instead.`,\n        );\n    }\n\n    return value;\n  }\n\n  private resolvePipe = (pipe: PipeNode): Resolution => {\n    const [head, ...tail] = pipe.steps;\n    const links: Link[] = [];\n    const link = this.resolveStep(pipe.d0, head);\n\n    links.push(link);\n\n    for (let i = 0; i < tail.length; i++) {\n      links.push(this.resolveStep(links[i].fn.d, tail[i]));\n    }\n\n    const [staticFn, dynamicFn] = this.buildComposites(links);\n    return { n: pipe.n, staticFn, dynamicFn };\n  };\n\n  private buildComposites = (links: Link[]) => {\n    let builder = new CompositeFn.Builder();\n    while (links.length && !links[0].isDynamic) {\n      builder.add(links.shift().fn);\n    }\n\n    const init = builder.build();\n    builder = new CompositeFn.Builder().add(new Identity(init.d));\n\n    while (links.length) {\n      builder.add(links.shift().fn);\n    }\n\n    const iter = builder.build();\n    return [init, iter];\n  };\n\n  private resolveStep = (d0: number, { type, args }: StepNode): Link => {\n    const d = ranges[type](d0);\n    const fn = funs[type](d, ...args.map(a => this.resolve(a)));\n    const isDynamic = args.some(this.isNodeDynamic);\n\n    return { fn, isDynamic };\n  };\n\n  private resolveFn = ({ name, args }: FnNode): number => {\n    const fn = Math[name];\n    assert(\n      typeof fn === 'function',\n      `Expected ${name} to be a Math function in ${pp({ name, args })}`,\n    );\n    return fn(...args.map(a => this.resolve(a)));\n  };\n\n  private resolveAccess = ({ id, index }: AccessNode): number => {\n    const scope = this.scope;\n    const target = scope[id];\n    assert(target, `Unable to resolve ${id} in scope ${pp(scope, 2)}`);\n    return target[this.resolve(index, 'number')];\n  };\n\n  private resolveId = (id: string): Value => {\n    if (id in this.scope) {\n      return this.scope[id];\n    } else if (id in Math) {\n      return Math[id];\n    } else {\n      const idu = id.toUpperCase();\n      if (idu in Math) return Math[idu];\n    }\n\n    assert.fail(`unable to resolve id ${id} in scope ${pp(this.scope, 2)}`);\n  };\n\n  private resolveArith = ({ op, operands }: ArithNode) => {\n    const [a, b] = operands.map(a => this.resolve(a, 'number'));\n    return ops[op](a, b);\n  };\n\n  private isNodeDynamic = (node: Scalar): boolean => {\n    switch (node.kind) {\n      case 'fn':\n        return node.args.some(this.isNodeDynamic);\n      case 'id':\n        return typeof this.resolve(node) === 'number';\n      case 'arith':\n        return node.operands.some(this.isNodeDynamic);\n      default:\n        return false;\n    }\n  };\n}\n\nconst ops: { [op: string]: (a: number, b: number) => number } = {\n  '+': (a, b) => a + b,\n  '-': (a, b) => a - b,\n  '*': (a, b) => a * b,\n  '/': (a, b) => a / b,\n  '**': (a, b) => a ** b,\n  '^': (a, b) => a ** b,\n};\n\nconst funs: { [op: string]: (d: number, ...rest) => Fn } = {\n  cube: (d, l) => new Cube(d, l),\n  sphere: (d, r: number) => new Sphere(d, r),\n  spiral: (d, a: number, k: number) =>\n    new Spiral(d, new Array(d).fill(a), new Array(d - 1).fill(k)),\n  torus: (d, r: number, t: number) => new Torus(d, r, t),\n  fucked_up_torus: (d, r: number, t: number) => new FuckedUpTorus(d, r, t),\n  rotate: (\n    d: number,\n    theta: number,\n    d0: number,\n    d1: number,\n    f0: UnaryOperator = Math.cos,\n    f1: UnaryOperator = Math.sin,\n  ) => {\n    assert(0 <= d0 && d0 < d, `rotate: Expected 0 <= d0 = ${d0} < d = ${d}`);\n    assert(0 <= d1 && d1 < d, `rotate: Expected 0 <= d1 = ${d1} < d = ${d}`);\n    return new Rotator(d, theta, d0, d1, f0, f1);\n  },\n  stereo: (d, to) => new Stereo(d, to),\n};\n\ntype Funs = typeof funs;\n\ntype Ranges = {\n  [P in keyof Funs]: (domain: number) => number;\n};\n\nconst ranges: Ranges = {\n  cube: domain => domain,\n  sphere: domain => domain + 1,\n  spiral: domain => domain + 1,\n  torus: domain => domain + 1,\n  fucked_up_torus: domain => domain + 1,\n  rotate: domain => domain,\n  r: domain => domain,\n  stereo: domain => domain,\n};\n","import {\n  PerspectiveCamera,\n  BufferGeometry,\n  BufferAttribute,\n  Points,\n  PointsMaterial,\n  WebGLRenderer,\n  VertexColors,\n  Scene,\n} from 'three';\nimport { Data } from '../core/data';\nimport assert from 'assert';\n\nclass Renderer {\n  private renderer: WebGLRenderer;\n  private scene: Scene;\n  private camera: PerspectiveCamera;\n  private points: Points;\n  private z = 5;\n\n  constructor() {\n    this.renderer = new WebGLRenderer();\n    this.setSize();\n    window.onresize = () => {\n      this.setSize();\n      requestAnimationFrame(this.render);\n    };\n\n    this.points = new Points(\n      new BufferGeometry(),\n      new PointsMaterial({\n        vertexColors: VertexColors,\n        size: 0.001,\n      }),\n    );\n\n    this.scene = new Scene();\n    this.scene.add(this.points);\n  }\n\n  private setSize = () => {\n    const near = 0.01,\n      far = 1000;\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    const aspect = width / height;\n    const fov = 100;\n\n    this.renderer.setSize(width, height);\n    this.camera = new PerspectiveCamera(fov, aspect, near, far);\n    this.camera.position.z = this.z;\n  };\n\n  get domElement() {\n    return this.renderer.domElement;\n  }\n\n  render = () => {\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  update = ({ d, position, color }: Data) => {\n    const { points } = this;\n    const geometry = points.geometry as BufferGeometry;\n    assert.equal(position.length % d, 0);\n    assert.equal(color.length % 3, 0);\n\n    geometry.setAttribute('position', new BufferAttribute(position, d));\n    geometry.setAttribute('color', new BufferAttribute(color, 3));\n\n    let z = 5;\n    if (d > 2) {\n      geometry.computeBoundingSphere();\n      const s = geometry.boundingSphere;\n      z = Math.min(5, s.center.z + s.radius + 1);\n    }\n    this.camera.position.z = this.z = z;\n\n    requestAnimationFrame(this.render);\n  };\n}\n\nexport const renderer = new Renderer();\n"],"sourceRoot":""}