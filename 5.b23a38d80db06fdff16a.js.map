{"version":3,"sources":["webpack:///./src/client/inputs.ts","webpack:///./src/client/controls.ts"],"names":["initialValues","pipe","theta","h","l","animate","sound","subjects","streams","persistence","query","URLSearchParams","window","location","search","key","get","saved","Object","entries","value","localStorage","getItem","restore","Subject","asObservable","values","Proxy","set","target","property","oldValue","success","Reflect","setItem","toString","persist","next","newValue","event","Controls","constructor","name","document","createElement","this","domElement","style","position","bottom","right","padding","color","display","flexDirection","alignItems","displayNames","type","input","Control","appendChild","append","children","forEach","c","checked","size","onchange","label","innerText","paddingRight","cursor","subscribe"],"mappings":"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","file":"5.b23a38d80db06fdff16a.js","sourcesContent":["import { Observable, Subject } from 'rxjs';\n\nconst initialValues = {\n    pipe: '10000->sphere(4, 1)->R(theta, 0, 1, cos, tan)->R(theta, 0, 2)->R(theta, 0, 3)->stereo(3)',\n    theta: 'pi * t / 20 + pi * power / 20',\n    h: 'chroma * i / n',\n    l: '0.2 + 0.8 * power',\n    animate: true,\n    sound: false,\n};\nexport type Inputs = typeof initialValues;\n\ntype Change<T> = {\n    newValue: T;\n    oldValue?: T;\n    event?: Event;\n};\nconst subjects: { [P in keyof Inputs]?: Subject<Change<Inputs[P]>> } = {};\n\nexport const streams: { [P in keyof Inputs]?: Observable<Change<Inputs[P]>> } = {};\n\nconst persistence: { [P in keyof Inputs]: boolean } = {\n    pipe: true,\n    theta: true,\n    h: true,\n    l: true,\n    animate: false,\n    sound: false,\n};\n\nconst persist = () => {\n    for (const [key, value] of Object.entries(values)) {\n        if (persistence[key]) {\n            localStorage.setItem(`inputs.${key}`, value.toString());\n        };\n    }\n};\n\nconst restore = () => {\n    // TODO (maybe): also support override from window.location.hash\n    for (const [key, saved] of Object.entries(persistence)) {\n        if (saved) {\n            const value = localStorage.getItem(`inputs.${key}`);\n            if (value) initialValues[key] = value;\n        };\n    }\n};\n\nconst query = new URLSearchParams(window.location.search);\nif (query.get('restore') !== '0') {\n    restore();\n}\n\nfor (const key in initialValues) {\n    subjects[key] = new Subject();\n    streams[key] = subjects[key].asObservable();\n}\n\nexport const values = new Proxy(initialValues, {\n    set(target, property, value) {\n        const oldValue = target[property];\n        const success = Reflect.set(target, property, value);\n        if (query.get('persist') !== '0') persist();\n        subjects[property].next({ newValue: value, event: window.event, oldValue });\n        return success;\n    }\n});\n","import { values, streams, Inputs } from './inputs';\n\nexport class Controls {\n    readonly domElement = document.createElement('form');\n\n    constructor() {\n        this.domElement.style.position = 'absolute';\n        this.domElement.style.bottom = '0';\n        this.domElement.style.right = '0';\n        this.domElement.style.padding = '8px';\n        this.domElement.style.color = 'white';\n        this.domElement.style.display = 'flex';\n        this.domElement.style.flexDirection = 'column';\n        this.domElement.style.alignItems = 'flex-end';\n\n        for (const name in values) {\n            if (!(name in displayNames)) continue;\n\n            const type = typeof values[name] === 'boolean' ? 'checkbox' : 'text';\n            const input = new Control(name, type);\n            this.domElement.appendChild(input.domElement);\n        }\n    }\n\n    append(...children: { domElement: Element; }[]) {\n        children.forEach(c => this.domElement.appendChild(c.domElement));\n    }\n}\n\ntype DisplayNames = {\n    [P in keyof Inputs]?: string;\n};\nconst displayNames: DisplayNames = {\n    pipe: 'Pipe Spec',\n    theta: 'Theta',\n    h: 'Hue',\n    l: 'Lightness',\n    animate: 'Animate',\n    sound: '🎙️',\n};\n\nclass Control {\n    readonly domElement = document.createElement('span');\n\n    constructor(readonly name: string, readonly type: 'text' | 'checkbox') {\n        const input: HTMLInputElement = document.createElement('input');\n        const value = values[name];\n\n        input.name = name;\n        input.type = type;\n        if (type === 'checkbox') {\n            input.checked = value;\n        } else {\n            input.value = value;\n        }\n        input.size = 50;\n        input.onchange = () => {\n            if (type === 'checkbox') {\n                values[name] = input.checked;\n            } else {\n                values[name] = input.value;\n            }\n        };\n\n        const label = document.createElement('label');\n        label.innerText = displayNames[name];\n        label.style.paddingRight = '8px';\n        if (type === 'checkbox') label.style.cursor = 'pointer';\n        this.domElement.appendChild(label).appendChild(input);\n\n        streams[name].subscribe(({ event, newValue }) => {\n            if (event) return;\n            if (type === 'checkbox') {\n                input.checked = newValue;\n            } else {\n                input.value = newValue.toString();\n            }\n        });\n    }\n}\n"],"sourceRoot":""}